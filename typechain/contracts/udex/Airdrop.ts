/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AirdropInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptAdmin"
      | "admin"
      | "claim"
      | "claimed"
      | "claims"
      | "developer"
      | "expireTranche"
      | "newTranche"
      | "pendingAdmin"
      | "setPendingAdmin"
      | "token"
      | "trancheIdx"
      | "tranches"
      | "verifyClaim"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Claimed"
      | "NewAdmin"
      | "NewPendingAdmin"
      | "TrancheAdded"
      | "TrancheExpired"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claims",
    values: [AddressLike, BigNumberish[], BigNumberish[], BytesLike[][]]
  ): string;
  encodeFunctionData(functionFragment: "developer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "expireTranche",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newTranche",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "trancheIdx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tranches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyClaim",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claims", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "developer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expireTranche",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newTranche", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trancheIdx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tranches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyClaim",
    data: BytesLike
  ): Result;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    tranchId: BigNumberish,
    account: AddressLike,
    balance: BigNumberish
  ];
  export type OutputTuple = [
    tranchId: bigint,
    account: string,
    balance: bigint
  ];
  export interface OutputObject {
    tranchId: bigint;
    account: string;
    balance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAdminEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPendingAdminEvent {
  export type InputTuple = [
    oldPendingAdmin: AddressLike,
    newPendingAdmin: AddressLike
  ];
  export type OutputTuple = [oldPendingAdmin: string, newPendingAdmin: string];
  export interface OutputObject {
    oldPendingAdmin: string;
    newPendingAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrancheAddedEvent {
  export type InputTuple = [
    tranchId: BigNumberish,
    merkleRoot: BytesLike,
    startTime: BigNumberish,
    endTime: BigNumberish,
    totalAmount: BigNumberish
  ];
  export type OutputTuple = [
    tranchId: bigint,
    merkleRoot: string,
    startTime: bigint,
    endTime: bigint,
    totalAmount: bigint
  ];
  export interface OutputObject {
    tranchId: bigint;
    merkleRoot: string;
    startTime: bigint;
    endTime: bigint;
    totalAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrancheExpiredEvent {
  export type InputTuple = [tranchId: BigNumberish, expireAmount: BigNumberish];
  export type OutputTuple = [tranchId: bigint, expireAmount: bigint];
  export interface OutputObject {
    tranchId: bigint;
    expireAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Airdrop extends BaseContract {
  connect(runner?: ContractRunner | null): Airdrop;
  waitForDeployment(): Promise<this>;

  interface: AirdropInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptAdmin: TypedContractMethod<[], [void], "nonpayable">;

  admin: TypedContractMethod<[], [string], "view">;

  claim: TypedContractMethod<
    [
      account: AddressLike,
      _trancheId: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  claimed: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  claims: TypedContractMethod<
    [
      account: AddressLike,
      _trancheIds: BigNumberish[],
      _balances: BigNumberish[],
      _merkleProofs: BytesLike[][]
    ],
    [void],
    "nonpayable"
  >;

  developer: TypedContractMethod<[], [string], "view">;

  expireTranche: TypedContractMethod<
    [_trancheId: BigNumberish],
    [void],
    "nonpayable"
  >;

  newTranche: TypedContractMethod<
    [
      merkleRoot: BytesLike,
      startTime: BigNumberish,
      endTime: BigNumberish,
      totalAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  pendingAdmin: TypedContractMethod<[], [string], "view">;

  setPendingAdmin: TypedContractMethod<
    [newPendingAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  trancheIdx: TypedContractMethod<[], [bigint], "view">;

  tranches: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        merkleRoot: string;
        startTime: bigint;
        endTime: bigint;
        totalAmount: bigint;
        claimedAmount: bigint;
      }
    ],
    "view"
  >;

  verifyClaim: TypedContractMethod<
    [
      account: AddressLike,
      _trancheId: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[]
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptAdmin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [
      account: AddressLike,
      _trancheId: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "claims"
  ): TypedContractMethod<
    [
      account: AddressLike,
      _trancheIds: BigNumberish[],
      _balances: BigNumberish[],
      _merkleProofs: BytesLike[][]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "developer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "expireTranche"
  ): TypedContractMethod<[_trancheId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "newTranche"
  ): TypedContractMethod<
    [
      merkleRoot: BytesLike,
      startTime: BigNumberish,
      endTime: BigNumberish,
      totalAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pendingAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setPendingAdmin"
  ): TypedContractMethod<[newPendingAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "trancheIdx"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tranches"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        merkleRoot: string;
        startTime: bigint;
        endTime: bigint;
        totalAmount: bigint;
        claimedAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyClaim"
  ): TypedContractMethod<
    [
      account: AddressLike,
      _trancheId: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[]
    ],
    [boolean],
    "view"
  >;

  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "NewAdmin"
  ): TypedContractEvent<
    NewAdminEvent.InputTuple,
    NewAdminEvent.OutputTuple,
    NewAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewPendingAdmin"
  ): TypedContractEvent<
    NewPendingAdminEvent.InputTuple,
    NewPendingAdminEvent.OutputTuple,
    NewPendingAdminEvent.OutputObject
  >;
  getEvent(
    key: "TrancheAdded"
  ): TypedContractEvent<
    TrancheAddedEvent.InputTuple,
    TrancheAddedEvent.OutputTuple,
    TrancheAddedEvent.OutputObject
  >;
  getEvent(
    key: "TrancheExpired"
  ): TypedContractEvent<
    TrancheExpiredEvent.InputTuple,
    TrancheExpiredEvent.OutputTuple,
    TrancheExpiredEvent.OutputObject
  >;

  filters: {
    "Claimed(uint256,address,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "NewAdmin(address,address)": TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;
    NewAdmin: TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;

    "NewPendingAdmin(address,address)": TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;
    NewPendingAdmin: TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;

    "TrancheAdded(uint256,bytes32,uint64,uint64,uint256)": TypedContractEvent<
      TrancheAddedEvent.InputTuple,
      TrancheAddedEvent.OutputTuple,
      TrancheAddedEvent.OutputObject
    >;
    TrancheAdded: TypedContractEvent<
      TrancheAddedEvent.InputTuple,
      TrancheAddedEvent.OutputTuple,
      TrancheAddedEvent.OutputObject
    >;

    "TrancheExpired(uint256,uint256)": TypedContractEvent<
      TrancheExpiredEvent.InputTuple,
      TrancheExpiredEvent.OutputTuple,
      TrancheExpiredEvent.OutputObject
    >;
    TrancheExpired: TypedContractEvent<
      TrancheExpiredEvent.InputTuple,
      TrancheExpiredEvent.OutputTuple,
      TrancheExpiredEvent.OutputObject
    >;
  };
}
