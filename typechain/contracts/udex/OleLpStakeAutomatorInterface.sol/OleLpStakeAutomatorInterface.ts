/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface OleLpStakeAutomatorInterfaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createLockBoth"
      | "createLockOLE"
      | "createLockOther"
      | "increaseAmountBoth"
      | "increaseAmountOLE"
      | "increaseAmountOther"
      | "withdrawBoth"
      | "withdrawOle"
      | "withdrawOther"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createLockBoth",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createLockOLE",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLockOther",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAmountBoth",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAmountOLE",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAmountOther",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBoth",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOle",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOther",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createLockBoth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLockOLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLockOther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAmountBoth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAmountOLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAmountOther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBoth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOther",
    data: BytesLike
  ): Result;
}

export interface OleLpStakeAutomatorInterface extends BaseContract {
  connect(runner?: ContractRunner | null): OleLpStakeAutomatorInterface;
  waitForDeployment(): Promise<this>;

  interface: OleLpStakeAutomatorInterfaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createLockBoth: TypedContractMethod<
    [
      oleAmount: BigNumberish,
      otherAmount: BigNumberish,
      unlockTime: BigNumberish,
      oleMin: BigNumberish,
      otherMin: BigNumberish
    ],
    [void],
    "payable"
  >;

  createLockOLE: TypedContractMethod<
    [
      oleAmount: BigNumberish,
      unlockTime: BigNumberish,
      oleMin: BigNumberish,
      otherMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createLockOther: TypedContractMethod<
    [
      otherAmount: BigNumberish,
      unlockTime: BigNumberish,
      oleMin: BigNumberish,
      otherMin: BigNumberish
    ],
    [void],
    "payable"
  >;

  increaseAmountBoth: TypedContractMethod<
    [
      oleAmount: BigNumberish,
      otherAmount: BigNumberish,
      oleMin: BigNumberish,
      otherMin: BigNumberish
    ],
    [void],
    "payable"
  >;

  increaseAmountOLE: TypedContractMethod<
    [oleAmount: BigNumberish, oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "nonpayable"
  >;

  increaseAmountOther: TypedContractMethod<
    [otherAmount: BigNumberish, oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "payable"
  >;

  withdrawBoth: TypedContractMethod<
    [oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawOle: TypedContractMethod<
    [oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawOther: TypedContractMethod<
    [oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createLockBoth"
  ): TypedContractMethod<
    [
      oleAmount: BigNumberish,
      otherAmount: BigNumberish,
      unlockTime: BigNumberish,
      oleMin: BigNumberish,
      otherMin: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createLockOLE"
  ): TypedContractMethod<
    [
      oleAmount: BigNumberish,
      unlockTime: BigNumberish,
      oleMin: BigNumberish,
      otherMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createLockOther"
  ): TypedContractMethod<
    [
      otherAmount: BigNumberish,
      unlockTime: BigNumberish,
      oleMin: BigNumberish,
      otherMin: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "increaseAmountBoth"
  ): TypedContractMethod<
    [
      oleAmount: BigNumberish,
      otherAmount: BigNumberish,
      oleMin: BigNumberish,
      otherMin: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "increaseAmountOLE"
  ): TypedContractMethod<
    [oleAmount: BigNumberish, oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseAmountOther"
  ): TypedContractMethod<
    [otherAmount: BigNumberish, oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdrawBoth"
  ): TypedContractMethod<
    [oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawOle"
  ): TypedContractMethod<
    [oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawOther"
  ): TypedContractMethod<
    [oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
