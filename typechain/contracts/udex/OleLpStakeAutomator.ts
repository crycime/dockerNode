/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface OleLpStakeAutomatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptAdmin"
      | "admin"
      | "createLockBoth"
      | "createLockOLE"
      | "createLockOther"
      | "developer"
      | "implementation"
      | "increaseAmountBoth"
      | "increaseAmountOLE"
      | "increaseAmountOther"
      | "initialize"
      | "lpToken"
      | "nativeToken"
      | "ole"
      | "otherToken"
      | "pendingAdmin"
      | "setPendingAdmin"
      | "withdrawBoth"
      | "withdrawOle"
      | "withdrawOther"
      | "xole"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "NewAdmin" | "NewPendingAdmin"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createLockBoth",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createLockOLE",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLockOther",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "developer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAmountBoth",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAmountOLE",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAmountOther",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nativeToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ole", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "otherToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBoth",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOle",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOther",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "xole", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createLockBoth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLockOLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLockOther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "developer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAmountBoth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAmountOLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAmountOther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "otherToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBoth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xole", data: BytesLike): Result;
}

export namespace NewAdminEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPendingAdminEvent {
  export type InputTuple = [
    oldPendingAdmin: AddressLike,
    newPendingAdmin: AddressLike
  ];
  export type OutputTuple = [oldPendingAdmin: string, newPendingAdmin: string];
  export interface OutputObject {
    oldPendingAdmin: string;
    newPendingAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OleLpStakeAutomator extends BaseContract {
  connect(runner?: ContractRunner | null): OleLpStakeAutomator;
  waitForDeployment(): Promise<this>;

  interface: OleLpStakeAutomatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptAdmin: TypedContractMethod<[], [void], "nonpayable">;

  admin: TypedContractMethod<[], [string], "view">;

  createLockBoth: TypedContractMethod<
    [
      oleAmount: BigNumberish,
      otherAmount: BigNumberish,
      unlockTime: BigNumberish,
      oleMin: BigNumberish,
      otherMin: BigNumberish
    ],
    [void],
    "payable"
  >;

  createLockOLE: TypedContractMethod<
    [
      oleAmount: BigNumberish,
      unlockTime: BigNumberish,
      oleMin: BigNumberish,
      otherMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createLockOther: TypedContractMethod<
    [
      otherAmount: BigNumberish,
      unlockTime: BigNumberish,
      oleMin: BigNumberish,
      otherMin: BigNumberish
    ],
    [void],
    "payable"
  >;

  developer: TypedContractMethod<[], [string], "view">;

  implementation: TypedContractMethod<[], [string], "view">;

  increaseAmountBoth: TypedContractMethod<
    [
      oleAmount: BigNumberish,
      otherAmount: BigNumberish,
      oleMin: BigNumberish,
      otherMin: BigNumberish
    ],
    [void],
    "payable"
  >;

  increaseAmountOLE: TypedContractMethod<
    [oleAmount: BigNumberish, oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "nonpayable"
  >;

  increaseAmountOther: TypedContractMethod<
    [otherAmount: BigNumberish, oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "payable"
  >;

  initialize: TypedContractMethod<
    [
      _xole: AddressLike,
      _ole: AddressLike,
      _otherToken: AddressLike,
      _lpToken: AddressLike,
      _nativeToken: AddressLike,
      _router: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  lpToken: TypedContractMethod<[], [string], "view">;

  nativeToken: TypedContractMethod<[], [string], "view">;

  ole: TypedContractMethod<[], [string], "view">;

  otherToken: TypedContractMethod<[], [string], "view">;

  pendingAdmin: TypedContractMethod<[], [string], "view">;

  setPendingAdmin: TypedContractMethod<
    [newPendingAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawBoth: TypedContractMethod<
    [oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawOle: TypedContractMethod<
    [oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawOther: TypedContractMethod<
    [oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "nonpayable"
  >;

  xole: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptAdmin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createLockBoth"
  ): TypedContractMethod<
    [
      oleAmount: BigNumberish,
      otherAmount: BigNumberish,
      unlockTime: BigNumberish,
      oleMin: BigNumberish,
      otherMin: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createLockOLE"
  ): TypedContractMethod<
    [
      oleAmount: BigNumberish,
      unlockTime: BigNumberish,
      oleMin: BigNumberish,
      otherMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createLockOther"
  ): TypedContractMethod<
    [
      otherAmount: BigNumberish,
      unlockTime: BigNumberish,
      oleMin: BigNumberish,
      otherMin: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "developer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "increaseAmountBoth"
  ): TypedContractMethod<
    [
      oleAmount: BigNumberish,
      otherAmount: BigNumberish,
      oleMin: BigNumberish,
      otherMin: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "increaseAmountOLE"
  ): TypedContractMethod<
    [oleAmount: BigNumberish, oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseAmountOther"
  ): TypedContractMethod<
    [otherAmount: BigNumberish, oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _xole: AddressLike,
      _ole: AddressLike,
      _otherToken: AddressLike,
      _lpToken: AddressLike,
      _nativeToken: AddressLike,
      _router: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lpToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nativeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ole"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "otherToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setPendingAdmin"
  ): TypedContractMethod<[newPendingAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawBoth"
  ): TypedContractMethod<
    [oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawOle"
  ): TypedContractMethod<
    [oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawOther"
  ): TypedContractMethod<
    [oleMin: BigNumberish, otherMin: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "xole"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "NewAdmin"
  ): TypedContractEvent<
    NewAdminEvent.InputTuple,
    NewAdminEvent.OutputTuple,
    NewAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewPendingAdmin"
  ): TypedContractEvent<
    NewPendingAdminEvent.InputTuple,
    NewPendingAdminEvent.OutputTuple,
    NewPendingAdminEvent.OutputObject
  >;

  filters: {
    "NewAdmin(address,address)": TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;
    NewAdmin: TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;

    "NewPendingAdmin(address,address)": TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;
    NewPendingAdmin: TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;
  };
}
