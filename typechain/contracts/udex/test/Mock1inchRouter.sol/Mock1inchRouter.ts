/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace Mock1inchRouter {
  export type SwapDescriptionStruct = {
    srcToken: AddressLike;
    dstToken: AddressLike;
    srcReceiver: AddressLike;
    dstReceiver: AddressLike;
    amount: BigNumberish;
    minReturnAmount: BigNumberish;
    flags: BigNumberish;
  };

  export type SwapDescriptionStructOutput = [
    srcToken: string,
    dstToken: string,
    srcReceiver: string,
    dstReceiver: string,
    amount: bigint,
    minReturnAmount: bigint,
    flags: bigint
  ] & {
    srcToken: string;
    dstToken: string;
    srcReceiver: string;
    dstReceiver: string;
    amount: bigint;
    minReturnAmount: bigint;
    flags: bigint;
  };
}

export interface Mock1inchRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "clipperSwap"
      | "setVerifyAmount"
      | "setVerifyDstToken"
      | "setVerifyMinReturn"
      | "setVerifyPools"
      | "setVerifySrcToken"
      | "swap"
      | "uniswapV3Swap"
      | "unoswap"
      | "verifyAmount"
      | "verifyDstToken"
      | "verifyMinReturn"
      | "verifyPools"
      | "verifySrcToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "clipperSwap",
    values: [BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifyAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifyDstToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifyMinReturn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifyPools",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifySrcToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      AddressLike,
      Mock1inchRouter.SwapDescriptionStruct,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Swap",
    values: [BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unoswap",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyDstToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMinReturn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySrcToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "clipperSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifyDstToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifyMinReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifyPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifySrcToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Swap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unoswap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyDstToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMinReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySrcToken",
    data: BytesLike
  ): Result;
}

export interface Mock1inchRouter extends BaseContract {
  connect(runner?: ContractRunner | null): Mock1inchRouter;
  waitForDeployment(): Promise<this>;

  interface: Mock1inchRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  clipperSwap: TypedContractMethod<
    [amount: BigNumberish, minReturn: BigNumberish, pools: BigNumberish[]],
    [bigint],
    "payable"
  >;

  setVerifyAmount: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVerifyDstToken: TypedContractMethod<
    [dstToken: AddressLike],
    [void],
    "nonpayable"
  >;

  setVerifyMinReturn: TypedContractMethod<
    [minReturn: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVerifyPools: TypedContractMethod<
    [pools: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setVerifySrcToken: TypedContractMethod<
    [srcToken: AddressLike],
    [void],
    "nonpayable"
  >;

  swap: TypedContractMethod<
    [
      executor: AddressLike,
      desc: Mock1inchRouter.SwapDescriptionStruct,
      permit: BytesLike,
      data: BytesLike
    ],
    [[bigint, bigint] & { returnAmount: bigint; spentAmount: bigint }],
    "payable"
  >;

  uniswapV3Swap: TypedContractMethod<
    [amount: BigNumberish, minReturn: BigNumberish, pools: BigNumberish[]],
    [bigint],
    "payable"
  >;

  unoswap: TypedContractMethod<
    [
      srcToken: AddressLike,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BigNumberish[]
    ],
    [bigint],
    "payable"
  >;

  verifyAmount: TypedContractMethod<[], [bigint], "view">;

  verifyDstToken: TypedContractMethod<[], [string], "view">;

  verifyMinReturn: TypedContractMethod<[], [bigint], "view">;

  verifyPools: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  verifySrcToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "clipperSwap"
  ): TypedContractMethod<
    [amount: BigNumberish, minReturn: BigNumberish, pools: BigNumberish[]],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setVerifyAmount"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVerifyDstToken"
  ): TypedContractMethod<[dstToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVerifyMinReturn"
  ): TypedContractMethod<[minReturn: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVerifyPools"
  ): TypedContractMethod<[pools: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVerifySrcToken"
  ): TypedContractMethod<[srcToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [
      executor: AddressLike,
      desc: Mock1inchRouter.SwapDescriptionStruct,
      permit: BytesLike,
      data: BytesLike
    ],
    [[bigint, bigint] & { returnAmount: bigint; spentAmount: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "uniswapV3Swap"
  ): TypedContractMethod<
    [amount: BigNumberish, minReturn: BigNumberish, pools: BigNumberish[]],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unoswap"
  ): TypedContractMethod<
    [
      srcToken: AddressLike,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BigNumberish[]
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "verifyAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifyDstToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyMinReturn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifyPools"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifySrcToken"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
