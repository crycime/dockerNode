/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface MockTaxTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_liquidityFee"
      | "_maxTxAmount"
      | "_taxFee"
      | "_uniswapBuyLiquidityFee"
      | "_uniswapBuyTaxFee"
      | "_uniswapSellLiquidityFee"
      | "_uniswapSellTaxFee"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "decimals"
      | "decreaseAllowance"
      | "deliver"
      | "excludeFromFee"
      | "excludeFromReward"
      | "includeInFee"
      | "includeInReward"
      | "increaseAllowance"
      | "isExcludedFromFee"
      | "isExcludedFromReward"
      | "name"
      | "numTokensSellToAddToLiquidity"
      | "owner"
      | "reflectionFromToken"
      | "renounceOwnership"
      | "setLiquidityFeePercent"
      | "setMaxTxPercent"
      | "setNumTokensSellToAddToLiquidity"
      | "setRouterAddress"
      | "setSwapAndLiquifyEnabled"
      | "setTaxFeePercent"
      | "setUniswapBuyLiquidityFeePercent"
      | "setUniswapBuyTaxFeePercent"
      | "setUniswapSellLiquidityFeePercent"
      | "setUniswapSellTaxFeePercent"
      | "swapAndLiquifyEnabled"
      | "symbol"
      | "tokenFromReflection"
      | "totalFees"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "uniswapV2Pair"
      | "uniswapV2Router"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "MinTokensBeforeSwapUpdated"
      | "OwnershipTransferred"
      | "SwapAndLiquify"
      | "SwapAndLiquifyEnabledUpdated"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_liquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxTxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_taxFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_uniswapBuyLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_uniswapBuyTaxFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_uniswapSellLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_uniswapSellTaxFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deliver",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "includeInFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "includeInReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numTokensSellToAddToLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reflectionFromToken",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTxPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNumTokensSellToAddToLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouterAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapAndLiquifyEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapBuyLiquidityFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapBuyTaxFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapSellLiquidityFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapSellTaxFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndLiquifyEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenFromReflection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "totalFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_liquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxTxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_taxFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_uniswapBuyLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_uniswapBuyTaxFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_uniswapSellLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_uniswapSellTaxFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deliver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeInFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeInReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numTokensSellToAddToLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reflectionFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTxPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNumTokensSellToAddToLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaxFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapBuyLiquidityFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapBuyTaxFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapSellLiquidityFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapSellTaxFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenFromReflection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinTokensBeforeSwapUpdatedEvent {
  export type InputTuple = [minTokensBeforeSwap: BigNumberish];
  export type OutputTuple = [minTokensBeforeSwap: bigint];
  export interface OutputObject {
    minTokensBeforeSwap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapAndLiquifyEvent {
  export type InputTuple = [
    tokensSwapped: BigNumberish,
    ethReceived: BigNumberish,
    tokensIntoLiqudity: BigNumberish
  ];
  export type OutputTuple = [
    tokensSwapped: bigint,
    ethReceived: bigint,
    tokensIntoLiqudity: bigint
  ];
  export interface OutputObject {
    tokensSwapped: bigint;
    ethReceived: bigint;
    tokensIntoLiqudity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapAndLiquifyEnabledUpdatedEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockTaxToken extends BaseContract {
  connect(runner?: ContractRunner | null): MockTaxToken;
  waitForDeployment(): Promise<this>;

  interface: MockTaxTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _liquidityFee: TypedContractMethod<[], [bigint], "view">;

  _maxTxAmount: TypedContractMethod<[], [bigint], "view">;

  _taxFee: TypedContractMethod<[], [bigint], "view">;

  _uniswapBuyLiquidityFee: TypedContractMethod<[], [bigint], "view">;

  _uniswapBuyTaxFee: TypedContractMethod<[], [bigint], "view">;

  _uniswapSellLiquidityFee: TypedContractMethod<[], [bigint], "view">;

  _uniswapSellTaxFee: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  deliver: TypedContractMethod<[tAmount: BigNumberish], [void], "nonpayable">;

  excludeFromFee: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  excludeFromReward: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  includeInFee: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  includeInReward: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  isExcludedFromFee: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  isExcludedFromReward: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  numTokensSellToAddToLiquidity: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  reflectionFromToken: TypedContractMethod<
    [tAmount: BigNumberish, deductTransferFee: boolean],
    [bigint],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setLiquidityFeePercent: TypedContractMethod<
    [liquidityFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxTxPercent: TypedContractMethod<
    [maxTxPercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNumTokensSellToAddToLiquidity: TypedContractMethod<
    [amountToUpdate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRouterAddress: TypedContractMethod<
    [newRouter: AddressLike],
    [void],
    "nonpayable"
  >;

  setSwapAndLiquifyEnabled: TypedContractMethod<
    [_enabled: boolean],
    [void],
    "nonpayable"
  >;

  setTaxFeePercent: TypedContractMethod<
    [taxFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUniswapBuyLiquidityFeePercent: TypedContractMethod<
    [liquidityFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUniswapBuyTaxFeePercent: TypedContractMethod<
    [taxFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUniswapSellLiquidityFeePercent: TypedContractMethod<
    [liquidityFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUniswapSellTaxFeePercent: TypedContractMethod<
    [taxFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  swapAndLiquifyEnabled: TypedContractMethod<[], [boolean], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenFromReflection: TypedContractMethod<
    [rAmount: BigNumberish],
    [bigint],
    "view"
  >;

  totalFees: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uniswapV2Pair: TypedContractMethod<[], [string], "view">;

  uniswapV2Router: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_liquidityFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_maxTxAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_taxFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_uniswapBuyLiquidityFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_uniswapBuyTaxFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_uniswapSellLiquidityFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_uniswapSellTaxFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deliver"
  ): TypedContractMethod<[tAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "excludeFromFee"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "excludeFromReward"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "includeInFee"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "includeInReward"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isExcludedFromFee"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExcludedFromReward"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "numTokensSellToAddToLiquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reflectionFromToken"
  ): TypedContractMethod<
    [tAmount: BigNumberish, deductTransferFee: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLiquidityFeePercent"
  ): TypedContractMethod<[liquidityFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxTxPercent"
  ): TypedContractMethod<[maxTxPercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNumTokensSellToAddToLiquidity"
  ): TypedContractMethod<[amountToUpdate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRouterAddress"
  ): TypedContractMethod<[newRouter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSwapAndLiquifyEnabled"
  ): TypedContractMethod<[_enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTaxFeePercent"
  ): TypedContractMethod<[taxFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUniswapBuyLiquidityFeePercent"
  ): TypedContractMethod<[liquidityFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUniswapBuyTaxFeePercent"
  ): TypedContractMethod<[taxFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUniswapSellLiquidityFeePercent"
  ): TypedContractMethod<[liquidityFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUniswapSellTaxFeePercent"
  ): TypedContractMethod<[taxFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapAndLiquifyEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenFromReflection"
  ): TypedContractMethod<[rAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapV2Pair"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapV2Router"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "MinTokensBeforeSwapUpdated"
  ): TypedContractEvent<
    MinTokensBeforeSwapUpdatedEvent.InputTuple,
    MinTokensBeforeSwapUpdatedEvent.OutputTuple,
    MinTokensBeforeSwapUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SwapAndLiquify"
  ): TypedContractEvent<
    SwapAndLiquifyEvent.InputTuple,
    SwapAndLiquifyEvent.OutputTuple,
    SwapAndLiquifyEvent.OutputObject
  >;
  getEvent(
    key: "SwapAndLiquifyEnabledUpdated"
  ): TypedContractEvent<
    SwapAndLiquifyEnabledUpdatedEvent.InputTuple,
    SwapAndLiquifyEnabledUpdatedEvent.OutputTuple,
    SwapAndLiquifyEnabledUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "MinTokensBeforeSwapUpdated(uint256)": TypedContractEvent<
      MinTokensBeforeSwapUpdatedEvent.InputTuple,
      MinTokensBeforeSwapUpdatedEvent.OutputTuple,
      MinTokensBeforeSwapUpdatedEvent.OutputObject
    >;
    MinTokensBeforeSwapUpdated: TypedContractEvent<
      MinTokensBeforeSwapUpdatedEvent.InputTuple,
      MinTokensBeforeSwapUpdatedEvent.OutputTuple,
      MinTokensBeforeSwapUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SwapAndLiquify(uint256,uint256,uint256)": TypedContractEvent<
      SwapAndLiquifyEvent.InputTuple,
      SwapAndLiquifyEvent.OutputTuple,
      SwapAndLiquifyEvent.OutputObject
    >;
    SwapAndLiquify: TypedContractEvent<
      SwapAndLiquifyEvent.InputTuple,
      SwapAndLiquifyEvent.OutputTuple,
      SwapAndLiquifyEvent.OutputObject
    >;

    "SwapAndLiquifyEnabledUpdated(bool)": TypedContractEvent<
      SwapAndLiquifyEnabledUpdatedEvent.InputTuple,
      SwapAndLiquifyEnabledUpdatedEvent.OutputTuple,
      SwapAndLiquifyEnabledUpdatedEvent.OutputObject
    >;
    SwapAndLiquifyEnabledUpdated: TypedContractEvent<
      SwapAndLiquifyEnabledUpdatedEvent.InputTuple,
      SwapAndLiquifyEnabledUpdatedEvent.OutputTuple,
      SwapAndLiquifyEnabledUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
