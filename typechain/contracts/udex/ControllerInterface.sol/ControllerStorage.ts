/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ControllerStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "baseRatePerBlock"
      | "borrowingSuspend"
      | "dexAggregator"
      | "jumpMultiplierPerBlock"
      | "kink"
      | "lPoolRewardByAccounts"
      | "lpoolDistributions"
      | "lpoolImplementation"
      | "lpoolPairs"
      | "lpoolUnAlloweds"
      | "marketExtraDistribution"
      | "marketSuspend"
      | "multiplierPerBlock"
      | "oleToken"
      | "oleTokenDistribution"
      | "oleWethDexData"
      | "opBorrowing"
      | "openLev"
      | "publicPools"
      | "suspend"
      | "suspendAll"
      | "wETH"
      | "xoleToken"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "LPoolPairCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "baseRatePerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowingSuspend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dexAggregator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jumpMultiplierPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kink", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lPoolRewardByAccounts",
    values: [AddressLike, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lpoolDistributions",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "lpoolImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lpoolPairs",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lpoolUnAlloweds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketExtraDistribution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketSuspend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplierPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oleToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oleTokenDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oleWethDexData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "opBorrowing",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "openLev", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publicPools",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "suspend", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "suspendAll",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "xoleToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "baseRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowingSuspend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dexAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jumpMultiplierPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kink", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lPoolRewardByAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpoolDistributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpoolImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpoolPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lpoolUnAlloweds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketExtraDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketSuspend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplierPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oleToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oleTokenDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oleWethDexData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "opBorrowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openLev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "suspend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "suspendAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xoleToken", data: BytesLike): Result;
}

export namespace LPoolPairCreatedEvent {
  export type InputTuple = [
    token0: AddressLike,
    pool0: AddressLike,
    token1: AddressLike,
    pool1: AddressLike,
    marketId: BigNumberish,
    marginLimit: BigNumberish,
    dexData: BytesLike
  ];
  export type OutputTuple = [
    token0: string,
    pool0: string,
    token1: string,
    pool1: string,
    marketId: bigint,
    marginLimit: bigint,
    dexData: string
  ];
  export interface OutputObject {
    token0: string;
    pool0: string;
    token1: string;
    pool1: string;
    marketId: bigint;
    marginLimit: bigint;
    dexData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ControllerStorage extends BaseContract {
  connect(runner?: ContractRunner | null): ControllerStorage;
  waitForDeployment(): Promise<this>;

  interface: ControllerStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  baseRatePerBlock: TypedContractMethod<[], [bigint], "view">;

  borrowingSuspend: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  dexAggregator: TypedContractMethod<[], [string], "view">;

  jumpMultiplierPerBlock: TypedContractMethod<[], [bigint], "view">;

  kink: TypedContractMethod<[], [bigint], "view">;

  lPoolRewardByAccounts: TypedContractMethod<
    [arg0: AddressLike, arg1: boolean, arg2: AddressLike],
    [
      [bigint, bigint, bigint] & {
        rewardPerTokenStored: bigint;
        rewards: bigint;
        extraToken: bigint;
      }
    ],
    "view"
  >;

  lpoolDistributions: TypedContractMethod<
    [arg0: AddressLike, arg1: boolean],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        startTime: bigint;
        endTime: bigint;
        duration: bigint;
        lastUpdateTime: bigint;
        totalRewardAmount: bigint;
        rewardRate: bigint;
        rewardPerTokenStored: bigint;
        extraTotalToken: bigint;
      }
    ],
    "view"
  >;

  lpoolImplementation: TypedContractMethod<[], [string], "view">;

  lpoolPairs: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[string, string] & { lpool0: string; lpool1: string }],
    "view"
  >;

  lpoolUnAlloweds: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  marketExtraDistribution: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  marketSuspend: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  multiplierPerBlock: TypedContractMethod<[], [bigint], "view">;

  oleToken: TypedContractMethod<[], [string], "view">;

  oleTokenDistribution: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        supplyBorrowBalance: bigint;
        extraBalance: bigint;
        updatePricePer: bigint;
        liquidatorMaxPer: bigint;
        liquidatorOLERatio: bigint;
        xoleRaiseRatio: bigint;
        xoleRaiseMinAmount: bigint;
      }
    ],
    "view"
  >;

  oleWethDexData: TypedContractMethod<[], [string], "view">;

  opBorrowing: TypedContractMethod<[], [string], "view">;

  openLev: TypedContractMethod<[], [string], "view">;

  publicPools: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  suspend: TypedContractMethod<[], [boolean], "view">;

  suspendAll: TypedContractMethod<[], [boolean], "view">;

  wETH: TypedContractMethod<[], [string], "view">;

  xoleToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "baseRatePerBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowingSuspend"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "dexAggregator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "jumpMultiplierPerBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "kink"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lPoolRewardByAccounts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: boolean, arg2: AddressLike],
    [
      [bigint, bigint, bigint] & {
        rewardPerTokenStored: bigint;
        rewards: bigint;
        extraToken: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lpoolDistributions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: boolean],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        startTime: bigint;
        endTime: bigint;
        duration: bigint;
        lastUpdateTime: bigint;
        totalRewardAmount: bigint;
        rewardRate: bigint;
        rewardPerTokenStored: bigint;
        extraTotalToken: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lpoolImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lpoolPairs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[string, string] & { lpool0: string; lpool1: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "lpoolUnAlloweds"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "marketExtraDistribution"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "marketSuspend"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "multiplierPerBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oleToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "oleTokenDistribution"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        supplyBorrowBalance: bigint;
        extraBalance: bigint;
        updatePricePer: bigint;
        liquidatorMaxPer: bigint;
        liquidatorOLERatio: bigint;
        xoleRaiseRatio: bigint;
        xoleRaiseMinAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "oleWethDexData"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "opBorrowing"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "openLev"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "publicPools"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "suspend"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "suspendAll"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "wETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "xoleToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "LPoolPairCreated"
  ): TypedContractEvent<
    LPoolPairCreatedEvent.InputTuple,
    LPoolPairCreatedEvent.OutputTuple,
    LPoolPairCreatedEvent.OutputObject
  >;

  filters: {
    "LPoolPairCreated(address,address,address,address,uint16,uint16,bytes)": TypedContractEvent<
      LPoolPairCreatedEvent.InputTuple,
      LPoolPairCreatedEvent.OutputTuple,
      LPoolPairCreatedEvent.OutputObject
    >;
    LPoolPairCreated: TypedContractEvent<
      LPoolPairCreatedEvent.InputTuple,
      LPoolPairCreatedEvent.OutputTuple,
      LPoolPairCreatedEvent.OutputObject
    >;
  };
}
