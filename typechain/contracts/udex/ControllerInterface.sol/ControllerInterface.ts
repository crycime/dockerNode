/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ControllerInterfaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addPublicPool"
      | "borrowAllowed"
      | "closeTradeAllowed"
      | "collBorrowAllowed"
      | "collLiquidateAllowed"
      | "collRedeemAllowed"
      | "collRepayAllowed"
      | "createLPoolPair"
      | "createOfficialLPoolPair"
      | "liquidateAllowed"
      | "marginTradeAllowed"
      | "marginTradeAllowedV2"
      | "mintAllowed"
      | "redeemAllowed"
      | "repayBorrowAllowed"
      | "setBorrowingSuspend"
      | "setDexAggregator"
      | "setInterestParam"
      | "setLPoolImplementation"
      | "setLPoolUnAllowed"
      | "setMarketSuspend"
      | "setOleWethDexData"
      | "setOpBorrowing"
      | "setOpenLev"
      | "setSuspend"
      | "setSuspendAll"
      | "transferAllowed"
      | "updateInterestAllowed"
      | "updatePriceAllowed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPublicPool",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAllowed",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTradeAllowed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collBorrowAllowed",
    values: [BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "collLiquidateAllowed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collRedeemAllowed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collRepayAllowed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLPoolPair",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createOfficialLPoolPair",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateAllowed",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marginTradeAllowed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marginTradeAllowedV2",
    values: [BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAllowed",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAllowed",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrowAllowed",
    values: [AddressLike, AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowingSuspend",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDexAggregator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestParam",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLPoolImplementation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLPoolUnAllowed",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketSuspend",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOleWethDexData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpBorrowing",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpenLev",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setSuspend", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setSuspendAll",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAllowed",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInterestAllowed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceAllowed",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPublicPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeTradeAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collLiquidateAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collRedeemAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collRepayAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLPoolPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOfficialLPoolPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marginTradeAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marginTradeAllowedV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowingSuspend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDexAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLPoolImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLPoolUnAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketSuspend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOleWethDexData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOpBorrowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOpenLev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSuspend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSuspendAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInterestAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceAllowed",
    data: BytesLike
  ): Result;
}

export interface ControllerInterface extends BaseContract {
  connect(runner?: ContractRunner | null): ControllerInterface;
  waitForDeployment(): Promise<this>;

  interface: ControllerInterfaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addPublicPool: TypedContractMethod<
    [token: AddressLike, lpool: AddressLike],
    [void],
    "nonpayable"
  >;

  borrowAllowed: TypedContractMethod<
    [borrower: AddressLike, payee: AddressLike, borrowAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  closeTradeAllowed: TypedContractMethod<
    [marketId: BigNumberish],
    [boolean],
    "view"
  >;

  collBorrowAllowed: TypedContractMethod<
    [marketId: BigNumberish, borrower: AddressLike, collateralIndex: boolean],
    [boolean],
    "view"
  >;

  collLiquidateAllowed: TypedContractMethod<
    [marketId: BigNumberish],
    [boolean],
    "view"
  >;

  collRedeemAllowed: TypedContractMethod<
    [marketId: BigNumberish],
    [boolean],
    "view"
  >;

  collRepayAllowed: TypedContractMethod<
    [marketId: BigNumberish],
    [boolean],
    "view"
  >;

  createLPoolPair: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      marginLimit: BigNumberish,
      dexData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  createOfficialLPoolPair: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      marginLimit: BigNumberish,
      dexData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  liquidateAllowed: TypedContractMethod<
    [
      marketId: BigNumberish,
      liquidator: AddressLike,
      liquidateAmount: BigNumberish,
      dexData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  marginTradeAllowed: TypedContractMethod<
    [marketId: BigNumberish],
    [boolean],
    "view"
  >;

  marginTradeAllowedV2: TypedContractMethod<
    [marketId: BigNumberish, trader: AddressLike, longToken: boolean],
    [boolean],
    "view"
  >;

  mintAllowed: TypedContractMethod<
    [minter: AddressLike, lTokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  redeemAllowed: TypedContractMethod<
    [redeemer: AddressLike, lTokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  repayBorrowAllowed: TypedContractMethod<
    [
      payer: AddressLike,
      borrower: AddressLike,
      repayAmount: BigNumberish,
      isEnd: boolean
    ],
    [void],
    "nonpayable"
  >;

  setBorrowingSuspend: TypedContractMethod<
    [marketId: BigNumberish, suspend: boolean],
    [void],
    "nonpayable"
  >;

  setDexAggregator: TypedContractMethod<
    [_dexAggregator: AddressLike],
    [void],
    "nonpayable"
  >;

  setInterestParam: TypedContractMethod<
    [
      _baseRatePerBlock: BigNumberish,
      _multiplierPerBlock: BigNumberish,
      _jumpMultiplierPerBlock: BigNumberish,
      _kink: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setLPoolImplementation: TypedContractMethod<
    [_lpoolImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  setLPoolUnAllowed: TypedContractMethod<
    [lpool: AddressLike, unAllowed: boolean],
    [void],
    "nonpayable"
  >;

  setMarketSuspend: TypedContractMethod<
    [marketId: BigNumberish, suspend: boolean],
    [void],
    "nonpayable"
  >;

  setOleWethDexData: TypedContractMethod<
    [_oleWethDexData: BytesLike],
    [void],
    "nonpayable"
  >;

  setOpBorrowing: TypedContractMethod<
    [_opBorrowing: AddressLike],
    [void],
    "nonpayable"
  >;

  setOpenLev: TypedContractMethod<
    [_openlev: AddressLike],
    [void],
    "nonpayable"
  >;

  setSuspend: TypedContractMethod<[suspend: boolean], [void], "nonpayable">;

  setSuspendAll: TypedContractMethod<[suspend: boolean], [void], "nonpayable">;

  transferAllowed: TypedContractMethod<
    [from: AddressLike, to: AddressLike, lTokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateInterestAllowed: TypedContractMethod<
    [sender: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePriceAllowed: TypedContractMethod<
    [marketId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addPublicPool"
  ): TypedContractMethod<
    [token: AddressLike, lpool: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrowAllowed"
  ): TypedContractMethod<
    [borrower: AddressLike, payee: AddressLike, borrowAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "closeTradeAllowed"
  ): TypedContractMethod<[marketId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "collBorrowAllowed"
  ): TypedContractMethod<
    [marketId: BigNumberish, borrower: AddressLike, collateralIndex: boolean],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "collLiquidateAllowed"
  ): TypedContractMethod<[marketId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "collRedeemAllowed"
  ): TypedContractMethod<[marketId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "collRepayAllowed"
  ): TypedContractMethod<[marketId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "createLPoolPair"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      marginLimit: BigNumberish,
      dexData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createOfficialLPoolPair"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      marginLimit: BigNumberish,
      dexData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidateAllowed"
  ): TypedContractMethod<
    [
      marketId: BigNumberish,
      liquidator: AddressLike,
      liquidateAmount: BigNumberish,
      dexData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "marginTradeAllowed"
  ): TypedContractMethod<[marketId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "marginTradeAllowedV2"
  ): TypedContractMethod<
    [marketId: BigNumberish, trader: AddressLike, longToken: boolean],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintAllowed"
  ): TypedContractMethod<
    [minter: AddressLike, lTokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemAllowed"
  ): TypedContractMethod<
    [redeemer: AddressLike, lTokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayBorrowAllowed"
  ): TypedContractMethod<
    [
      payer: AddressLike,
      borrower: AddressLike,
      repayAmount: BigNumberish,
      isEnd: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBorrowingSuspend"
  ): TypedContractMethod<
    [marketId: BigNumberish, suspend: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDexAggregator"
  ): TypedContractMethod<[_dexAggregator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInterestParam"
  ): TypedContractMethod<
    [
      _baseRatePerBlock: BigNumberish,
      _multiplierPerBlock: BigNumberish,
      _jumpMultiplierPerBlock: BigNumberish,
      _kink: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLPoolImplementation"
  ): TypedContractMethod<
    [_lpoolImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLPoolUnAllowed"
  ): TypedContractMethod<
    [lpool: AddressLike, unAllowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMarketSuspend"
  ): TypedContractMethod<
    [marketId: BigNumberish, suspend: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOleWethDexData"
  ): TypedContractMethod<[_oleWethDexData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOpBorrowing"
  ): TypedContractMethod<[_opBorrowing: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOpenLev"
  ): TypedContractMethod<[_openlev: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSuspend"
  ): TypedContractMethod<[suspend: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSuspendAll"
  ): TypedContractMethod<[suspend: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferAllowed"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, lTokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateInterestAllowed"
  ): TypedContractMethod<[sender: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePriceAllowed"
  ): TypedContractMethod<
    [marketId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
