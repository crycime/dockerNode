/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface XOLEInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DELEGATION_TYPEHASH"
      | "DOMAIN_TYPEHASH"
      | "acceptAdmin"
      | "admin"
      | "balanceOf"
      | "checkpoints"
      | "claimableTokenAmount"
      | "convertToSharingToken"
      | "create_lock"
      | "create_lock_for"
      | "decimals"
      | "delegate"
      | "delegateBySig"
      | "delegateBySigs"
      | "delegates"
      | "dev"
      | "devFund"
      | "devFundRatio"
      | "developer"
      | "dexAgg"
      | "getCurrentVotes"
      | "getLockedAmount"
      | "getPriorVotes"
      | "implementation"
      | "increase_amount"
      | "increase_amount_for"
      | "increase_unlock_time"
      | "initialize"
      | "lastUpdateTime"
      | "locked"
      | "name"
      | "nonces"
      | "numCheckpoints"
      | "oleLpStakeAutomator"
      | "oleLpStakeToken"
      | "oleToken"
      | "pendingAdmin"
      | "rewardPerTokenStored"
      | "rewards"
      | "setDev"
      | "setDevFundRatio"
      | "setDexAgg"
      | "setOleLpStakeAutomator"
      | "setOleLpStakeToken"
      | "setPendingAdmin"
      | "setShareToken"
      | "shareToken"
      | "shareableTokenAmount"
      | "symbol"
      | "totalLocked"
      | "totalRewarded"
      | "totalStaked"
      | "totalSupply"
      | "totalSupplyAt"
      | "totalSupplyCheckpoints"
      | "totalSupplyNumCheckpoints"
      | "userRewardPerTokenPaid"
      | "withdraw"
      | "withdrawCommunityFund"
      | "withdrawDevFund"
      | "withdrawOle"
      | "withdraw_automator"
      | "withdrewReward"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DelegateChanged"
      | "DelegateVotesChanged"
      | "Deposit"
      | "FailedDelegateBySig"
      | "NewAdmin"
      | "NewPendingAdmin"
      | "RewardAdded"
      | "RewardConvert"
      | "RewardPaid"
      | "Supply"
      | "Transfer"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DELEGATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoints",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableTokenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertToSharingToken",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "create_lock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "create_lock_for",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateBySig",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateBySigs",
    values: [
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BytesLike[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "dev", values?: undefined): string;
  encodeFunctionData(functionFragment: "devFund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "devFundRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "developer", values?: undefined): string;
  encodeFunctionData(functionFragment: "dexAgg", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentVotes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorVotes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increase_amount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_amount_for",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_unlock_time",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "locked", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "numCheckpoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oleLpStakeAutomator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oleLpStakeToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oleToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setDev", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setDevFundRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDexAgg",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOleLpStakeAutomator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOleLpStakeToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setShareToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shareToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shareableTokenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewarded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyCheckpoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyNumCheckpoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenPaid",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawCommunityFund",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDevFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw_automator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrewReward",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DELEGATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToSharingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create_lock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create_lock_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devFund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "devFundRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "developer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dexAgg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_amount_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_unlock_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oleLpStakeAutomator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oleLpStakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oleToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDevFundRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDexAgg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOleLpStakeAutomator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOleLpStakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShareToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shareToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shareableTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewarded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyNumCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCommunityFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDevFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw_automator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrewReward",
    data: BytesLike
  ): Result;
}

export namespace DelegateChangedEvent {
  export type InputTuple = [
    delegator: AddressLike,
    fromDelegate: AddressLike,
    toDelegate: AddressLike
  ];
  export type OutputTuple = [
    delegator: string,
    fromDelegate: string,
    toDelegate: string
  ];
  export interface OutputObject {
    delegator: string;
    fromDelegate: string;
    toDelegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateVotesChangedEvent {
  export type InputTuple = [
    delegate: AddressLike,
    previousBalance: BigNumberish,
    newBalance: BigNumberish
  ];
  export type OutputTuple = [
    delegate: string,
    previousBalance: bigint,
    newBalance: bigint
  ];
  export interface OutputObject {
    delegate: string;
    previousBalance: bigint;
    newBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    provider: AddressLike,
    value: BigNumberish,
    unlocktime: BigNumberish,
    type_: BigNumberish,
    prevBalance: BigNumberish,
    balance: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    value: bigint,
    unlocktime: bigint,
    type_: bigint,
    prevBalance: bigint,
    balance: bigint
  ];
  export interface OutputObject {
    provider: string;
    value: bigint;
    unlocktime: bigint;
    type_: bigint;
    prevBalance: bigint;
    balance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FailedDelegateBySigEvent {
  export type InputTuple = [
    delegatee: AddressLike,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike
  ];
  export type OutputTuple = [
    delegatee: string,
    nonce: bigint,
    expiry: bigint,
    v: bigint,
    r: string,
    s: string
  ];
  export interface OutputObject {
    delegatee: string;
    nonce: bigint;
    expiry: bigint;
    v: bigint;
    r: string;
    s: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAdminEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPendingAdminEvent {
  export type InputTuple = [
    oldPendingAdmin: AddressLike,
    newPendingAdmin: AddressLike
  ];
  export type OutputTuple = [oldPendingAdmin: string, newPendingAdmin: string];
  export interface OutputObject {
    oldPendingAdmin: string;
    newPendingAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardAddedEvent {
  export type InputTuple = [
    fromToken: AddressLike,
    convertAmount: BigNumberish,
    reward: BigNumberish
  ];
  export type OutputTuple = [
    fromToken: string,
    convertAmount: bigint,
    reward: bigint
  ];
  export interface OutputObject {
    fromToken: string;
    convertAmount: bigint;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardConvertEvent {
  export type InputTuple = [
    fromToken: AddressLike,
    toToken: AddressLike,
    convertAmount: BigNumberish,
    returnAmount: BigNumberish
  ];
  export type OutputTuple = [
    fromToken: string,
    toToken: string,
    convertAmount: bigint,
    returnAmount: bigint
  ];
  export interface OutputObject {
    fromToken: string;
    toToken: string;
    convertAmount: bigint;
    returnAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardPaidEvent {
  export type InputTuple = [paidTo: AddressLike, amount: BigNumberish];
  export type OutputTuple = [paidTo: string, amount: bigint];
  export interface OutputObject {
    paidTo: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupplyEvent {
  export type InputTuple = [prevSupply: BigNumberish, supply: BigNumberish];
  export type OutputTuple = [prevSupply: bigint, supply: bigint];
  export interface OutputObject {
    prevSupply: bigint;
    supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    provider: AddressLike,
    value: BigNumberish,
    prevBalance: BigNumberish,
    balance: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    value: bigint,
    prevBalance: bigint,
    balance: bigint
  ];
  export interface OutputObject {
    provider: string;
    value: bigint;
    prevBalance: bigint;
    balance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface XOLE extends BaseContract {
  connect(runner?: ContractRunner | null): XOLE;
  waitForDeployment(): Promise<this>;

  interface: XOLEInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DELEGATION_TYPEHASH: TypedContractMethod<[], [string], "view">;

  DOMAIN_TYPEHASH: TypedContractMethod<[], [string], "view">;

  acceptAdmin: TypedContractMethod<[], [void], "nonpayable">;

  admin: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[addr: AddressLike], [bigint], "view">;

  checkpoints: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { fromBlock: bigint; votes: bigint }],
    "view"
  >;

  claimableTokenAmount: TypedContractMethod<[], [bigint], "view">;

  convertToSharingToken: TypedContractMethod<
    [amount: BigNumberish, minBuyAmount: BigNumberish, dexData: BytesLike],
    [void],
    "nonpayable"
  >;

  create_lock: TypedContractMethod<
    [_value: BigNumberish, _unlock_time: BigNumberish],
    [void],
    "nonpayable"
  >;

  create_lock_for: TypedContractMethod<
    [to: AddressLike, _value: BigNumberish, _unlock_time: BigNumberish],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  delegate: TypedContractMethod<[delegatee: AddressLike], [void], "nonpayable">;

  delegateBySig: TypedContractMethod<
    [
      delegatee: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  delegateBySigs: TypedContractMethod<
    [
      delegatee: AddressLike,
      nonce: BigNumberish[],
      expiry: BigNumberish[],
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  delegates: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  dev: TypedContractMethod<[], [string], "view">;

  devFund: TypedContractMethod<[], [bigint], "view">;

  devFundRatio: TypedContractMethod<[], [bigint], "view">;

  developer: TypedContractMethod<[], [string], "view">;

  dexAgg: TypedContractMethod<[], [string], "view">;

  getCurrentVotes: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getLockedAmount: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  getPriorVotes: TypedContractMethod<
    [account: AddressLike, blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  implementation: TypedContractMethod<[], [string], "view">;

  increase_amount: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  increase_amount_for: TypedContractMethod<
    [to: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  increase_unlock_time: TypedContractMethod<
    [_unlock_time: BigNumberish],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      _oleToken: AddressLike,
      _dexAgg: AddressLike,
      _devFundRatio: BigNumberish,
      _dev: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  lastUpdateTime: TypedContractMethod<[], [bigint], "view">;

  locked: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { amount: bigint; end: bigint }],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  numCheckpoints: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  oleLpStakeAutomator: TypedContractMethod<[], [string], "view">;

  oleLpStakeToken: TypedContractMethod<[], [string], "view">;

  oleToken: TypedContractMethod<[], [string], "view">;

  pendingAdmin: TypedContractMethod<[], [string], "view">;

  rewardPerTokenStored: TypedContractMethod<[], [bigint], "view">;

  rewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  setDev: TypedContractMethod<[newDev: AddressLike], [void], "nonpayable">;

  setDevFundRatio: TypedContractMethod<
    [newRatio: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDexAgg: TypedContractMethod<
    [newDexAgg: AddressLike],
    [void],
    "nonpayable"
  >;

  setOleLpStakeAutomator: TypedContractMethod<
    [_oleLpStakeAutomator: AddressLike],
    [void],
    "nonpayable"
  >;

  setOleLpStakeToken: TypedContractMethod<
    [_oleLpStakeToken: AddressLike],
    [void],
    "nonpayable"
  >;

  setPendingAdmin: TypedContractMethod<
    [newPendingAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  setShareToken: TypedContractMethod<
    [_shareToken: AddressLike],
    [void],
    "nonpayable"
  >;

  shareToken: TypedContractMethod<[], [string], "view">;

  shareableTokenAmount: TypedContractMethod<[], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalLocked: TypedContractMethod<[], [bigint], "view">;

  totalRewarded: TypedContractMethod<[], [bigint], "view">;

  totalStaked: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  totalSupplyAt: TypedContractMethod<
    [blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  totalSupplyCheckpoints: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { fromBlock: bigint; votes: bigint }],
    "view"
  >;

  totalSupplyNumCheckpoints: TypedContractMethod<[], [bigint], "view">;

  userRewardPerTokenPaid: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  withdrawCommunityFund: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawDevFund: TypedContractMethod<[], [void], "nonpayable">;

  withdrawOle: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  withdraw_automator: TypedContractMethod<
    [owner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrewReward: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DELEGATION_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptAdmin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkpoints"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { fromBlock: bigint; votes: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimableTokenAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertToSharingToken"
  ): TypedContractMethod<
    [amount: BigNumberish, minBuyAmount: BigNumberish, dexData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "create_lock"
  ): TypedContractMethod<
    [_value: BigNumberish, _unlock_time: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "create_lock_for"
  ): TypedContractMethod<
    [to: AddressLike, _value: BigNumberish, _unlock_time: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<[delegatee: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegateBySig"
  ): TypedContractMethod<
    [
      delegatee: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegateBySigs"
  ): TypedContractMethod<
    [
      delegatee: AddressLike,
      nonce: BigNumberish[],
      expiry: BigNumberish[],
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegates"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "dev"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "devFund"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "devFundRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "developer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dexAgg"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCurrentVotes"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLockedAmount"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPriorVotes"
  ): TypedContractMethod<
    [account: AddressLike, blockNumber: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "increase_amount"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "increase_amount_for"
  ): TypedContractMethod<
    [to: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increase_unlock_time"
  ): TypedContractMethod<[_unlock_time: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _oleToken: AddressLike,
      _dexAgg: AddressLike,
      _devFundRatio: BigNumberish,
      _dev: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastUpdateTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "locked"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { amount: bigint; end: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "numCheckpoints"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "oleLpStakeAutomator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "oleLpStakeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "oleToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardPerTokenStored"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setDev"
  ): TypedContractMethod<[newDev: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDevFundRatio"
  ): TypedContractMethod<[newRatio: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDexAgg"
  ): TypedContractMethod<[newDexAgg: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOleLpStakeAutomator"
  ): TypedContractMethod<
    [_oleLpStakeAutomator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOleLpStakeToken"
  ): TypedContractMethod<[_oleLpStakeToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPendingAdmin"
  ): TypedContractMethod<[newPendingAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setShareToken"
  ): TypedContractMethod<[_shareToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shareToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "shareableTokenAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalLocked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalRewarded"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyAt"
  ): TypedContractMethod<[blockNumber: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyCheckpoints"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { fromBlock: bigint; votes: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalSupplyNumCheckpoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userRewardPerTokenPaid"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawCommunityFund"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawDevFund"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawOle"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw_automator"
  ): TypedContractMethod<[owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrewReward"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "DelegateChanged"
  ): TypedContractEvent<
    DelegateChangedEvent.InputTuple,
    DelegateChangedEvent.OutputTuple,
    DelegateChangedEvent.OutputObject
  >;
  getEvent(
    key: "DelegateVotesChanged"
  ): TypedContractEvent<
    DelegateVotesChangedEvent.InputTuple,
    DelegateVotesChangedEvent.OutputTuple,
    DelegateVotesChangedEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "FailedDelegateBySig"
  ): TypedContractEvent<
    FailedDelegateBySigEvent.InputTuple,
    FailedDelegateBySigEvent.OutputTuple,
    FailedDelegateBySigEvent.OutputObject
  >;
  getEvent(
    key: "NewAdmin"
  ): TypedContractEvent<
    NewAdminEvent.InputTuple,
    NewAdminEvent.OutputTuple,
    NewAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewPendingAdmin"
  ): TypedContractEvent<
    NewPendingAdminEvent.InputTuple,
    NewPendingAdminEvent.OutputTuple,
    NewPendingAdminEvent.OutputObject
  >;
  getEvent(
    key: "RewardAdded"
  ): TypedContractEvent<
    RewardAddedEvent.InputTuple,
    RewardAddedEvent.OutputTuple,
    RewardAddedEvent.OutputObject
  >;
  getEvent(
    key: "RewardConvert"
  ): TypedContractEvent<
    RewardConvertEvent.InputTuple,
    RewardConvertEvent.OutputTuple,
    RewardConvertEvent.OutputObject
  >;
  getEvent(
    key: "RewardPaid"
  ): TypedContractEvent<
    RewardPaidEvent.InputTuple,
    RewardPaidEvent.OutputTuple,
    RewardPaidEvent.OutputObject
  >;
  getEvent(
    key: "Supply"
  ): TypedContractEvent<
    SupplyEvent.InputTuple,
    SupplyEvent.OutputTuple,
    SupplyEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "DelegateChanged(address,address,address)": TypedContractEvent<
      DelegateChangedEvent.InputTuple,
      DelegateChangedEvent.OutputTuple,
      DelegateChangedEvent.OutputObject
    >;
    DelegateChanged: TypedContractEvent<
      DelegateChangedEvent.InputTuple,
      DelegateChangedEvent.OutputTuple,
      DelegateChangedEvent.OutputObject
    >;

    "DelegateVotesChanged(address,uint256,uint256)": TypedContractEvent<
      DelegateVotesChangedEvent.InputTuple,
      DelegateVotesChangedEvent.OutputTuple,
      DelegateVotesChangedEvent.OutputObject
    >;
    DelegateVotesChanged: TypedContractEvent<
      DelegateVotesChangedEvent.InputTuple,
      DelegateVotesChangedEvent.OutputTuple,
      DelegateVotesChangedEvent.OutputObject
    >;

    "Deposit(address,uint256,uint256,int128,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "FailedDelegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": TypedContractEvent<
      FailedDelegateBySigEvent.InputTuple,
      FailedDelegateBySigEvent.OutputTuple,
      FailedDelegateBySigEvent.OutputObject
    >;
    FailedDelegateBySig: TypedContractEvent<
      FailedDelegateBySigEvent.InputTuple,
      FailedDelegateBySigEvent.OutputTuple,
      FailedDelegateBySigEvent.OutputObject
    >;

    "NewAdmin(address,address)": TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;
    NewAdmin: TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;

    "NewPendingAdmin(address,address)": TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;
    NewPendingAdmin: TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;

    "RewardAdded(address,uint256,uint256)": TypedContractEvent<
      RewardAddedEvent.InputTuple,
      RewardAddedEvent.OutputTuple,
      RewardAddedEvent.OutputObject
    >;
    RewardAdded: TypedContractEvent<
      RewardAddedEvent.InputTuple,
      RewardAddedEvent.OutputTuple,
      RewardAddedEvent.OutputObject
    >;

    "RewardConvert(address,address,uint256,uint256)": TypedContractEvent<
      RewardConvertEvent.InputTuple,
      RewardConvertEvent.OutputTuple,
      RewardConvertEvent.OutputObject
    >;
    RewardConvert: TypedContractEvent<
      RewardConvertEvent.InputTuple,
      RewardConvertEvent.OutputTuple,
      RewardConvertEvent.OutputObject
    >;

    "RewardPaid(address,uint256)": TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;
    RewardPaid: TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;

    "Supply(uint256,uint256)": TypedContractEvent<
      SupplyEvent.InputTuple,
      SupplyEvent.OutputTuple,
      SupplyEvent.OutputObject
    >;
    Supply: TypedContractEvent<
      SupplyEvent.InputTuple,
      SupplyEvent.OutputTuple,
      SupplyEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Withdraw(address,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
