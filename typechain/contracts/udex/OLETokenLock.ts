/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface OLETokenLockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "lockedAmount"
      | "release"
      | "releaseAbleAmount"
      | "releaseVars"
      | "token"
      | "transferTo"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Release" | "TransferTo"): EventFragment;

  encodeFunctionData(
    functionFragment: "lockedAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "release", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseAbleAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseVars",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferTo",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "lockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseAbleAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferTo", data: BytesLike): Result;
}

export namespace ReleaseEvent {
  export type InputTuple = [beneficiary: AddressLike, amount: BigNumberish];
  export type OutputTuple = [beneficiary: string, amount: bigint];
  export interface OutputObject {
    beneficiary: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferToEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [beneficiary: string, to: string, amount: bigint];
  export interface OutputObject {
    beneficiary: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OLETokenLock extends BaseContract {
  connect(runner?: ContractRunner | null): OLETokenLock;
  waitForDeployment(): Promise<this>;

  interface: OLETokenLockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  lockedAmount: TypedContractMethod<
    [beneficiary: AddressLike],
    [bigint],
    "view"
  >;

  release: TypedContractMethod<[], [void], "nonpayable">;

  releaseAbleAmount: TypedContractMethod<
    [beneficiary: AddressLike],
    [bigint],
    "view"
  >;

  releaseVars: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        amount: bigint;
        startTime: bigint;
        endTime: bigint;
        lastUpdateTime: bigint;
      }
    ],
    "view"
  >;

  token: TypedContractMethod<[], [string], "view">;

  transferTo: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "lockedAmount"
  ): TypedContractMethod<[beneficiary: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "release"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "releaseAbleAmount"
  ): TypedContractMethod<[beneficiary: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "releaseVars"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        amount: bigint;
        startTime: bigint;
        endTime: bigint;
        lastUpdateTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferTo"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Release"
  ): TypedContractEvent<
    ReleaseEvent.InputTuple,
    ReleaseEvent.OutputTuple,
    ReleaseEvent.OutputObject
  >;
  getEvent(
    key: "TransferTo"
  ): TypedContractEvent<
    TransferToEvent.InputTuple,
    TransferToEvent.OutputTuple,
    TransferToEvent.OutputObject
  >;

  filters: {
    "Release(address,uint256)": TypedContractEvent<
      ReleaseEvent.InputTuple,
      ReleaseEvent.OutputTuple,
      ReleaseEvent.OutputObject
    >;
    Release: TypedContractEvent<
      ReleaseEvent.InputTuple,
      ReleaseEvent.OutputTuple,
      ReleaseEvent.OutputObject
    >;

    "TransferTo(address,address,uint256)": TypedContractEvent<
      TransferToEvent.InputTuple,
      TransferToEvent.OutputTuple,
      TransferToEvent.OutputObject
    >;
    TransferTo: TypedContractEvent<
      TransferToEvent.InputTuple,
      TransferToEvent.OutputTuple,
      TransferToEvent.OutputObject
    >;
  };
}
