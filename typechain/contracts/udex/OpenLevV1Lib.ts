/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Types {
  export type TradeStruct = {
    deposited: BigNumberish;
    held: BigNumberish;
    depositToken: boolean;
    lastBlockNum: BigNumberish;
    heldRelativeBorrowed: BigNumberish;
  };

  export type TradeStructOutput = [
    deposited: bigint,
    held: bigint,
    depositToken: boolean,
    lastBlockNum: bigint,
    heldRelativeBorrowed: bigint
  ] & {
    deposited: bigint;
    held: bigint;
    depositToken: boolean;
    lastBlockNum: bigint;
    heldRelativeBorrowed: bigint;
  };

  export type MarketVarsStruct = {
    buyPool: AddressLike;
    sellPool: AddressLike;
    buyToken: AddressLike;
    sellToken: AddressLike;
    reserveBuyToken: BigNumberish;
    reserveSellToken: BigNumberish;
    buyPoolInsurance: BigNumberish;
    sellPoolInsurance: BigNumberish;
    marginLimit: BigNumberish;
    priceDiffientRatio: BigNumberish;
    dexs: BigNumberish[];
  };

  export type MarketVarsStructOutput = [
    buyPool: string,
    sellPool: string,
    buyToken: string,
    sellToken: string,
    reserveBuyToken: bigint,
    reserveSellToken: bigint,
    buyPoolInsurance: bigint,
    sellPoolInsurance: bigint,
    marginLimit: bigint,
    priceDiffientRatio: bigint,
    dexs: bigint[]
  ] & {
    buyPool: string;
    sellPool: string;
    buyToken: string;
    sellToken: string;
    reserveBuyToken: bigint;
    reserveSellToken: bigint;
    buyPoolInsurance: bigint;
    sellPoolInsurance: bigint;
    marginLimit: bigint;
    priceDiffientRatio: bigint;
    dexs: bigint[];
  };

  export type MarketsLiquidationStruct = {
    liquidationRate: BigNumberish;
    liquidaMaximumYield: BigNumberish;
    liquidaMinimumYield: BigNumberish;
  };

  export type MarketsLiquidationStructOutput = [
    liquidationRate: bigint,
    liquidaMaximumYield: bigint,
    liquidaMinimumYield: bigint
  ] & {
    liquidationRate: bigint;
    liquidaMaximumYield: bigint;
    liquidaMinimumYield: bigint;
  };

  export type LiquidateVarsStruct = {
    marketId: BigNumberish;
    longToken: boolean;
    borrowed: BigNumberish;
    fees: BigNumberish;
    repayAmount: BigNumberish;
    remainAmountAfterFees: BigNumberish;
    maxBenefits: BigNumberish;
    minBenefits: BigNumberish;
    realityBenefits: BigNumberish;
    needReparation: BigNumberish;
    token0Price: BigNumberish;
    dexDetail: BigNumberish;
  };

  export type LiquidateVarsStructOutput = [
    marketId: bigint,
    longToken: boolean,
    borrowed: bigint,
    fees: bigint,
    repayAmount: bigint,
    remainAmountAfterFees: bigint,
    maxBenefits: bigint,
    minBenefits: bigint,
    realityBenefits: bigint,
    needReparation: bigint,
    token0Price: bigint,
    dexDetail: bigint
  ] & {
    marketId: bigint;
    longToken: boolean;
    borrowed: bigint;
    fees: bigint;
    repayAmount: bigint;
    remainAmountAfterFees: bigint;
    maxBenefits: bigint;
    minBenefits: bigint;
    realityBenefits: bigint;
    needReparation: bigint;
    token0Price: bigint;
    dexDetail: bigint;
  };
}

export interface OpenLevV1LibInterface extends Interface {
  getFunction(
    nameOrSignature: "isPositionLiquidable" | "marginRatio" | "toLiquidateVars"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isPositionLiquidable",
    values: [
      Types.TradeStruct,
      boolean,
      BigNumberish,
      Types.MarketVarsStruct,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "marginRatio",
    values: [BigNumberish, AddressLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toLiquidateVars",
    values: [
      BigNumberish,
      boolean,
      BytesLike,
      Types.TradeStruct,
      Types.MarketVarsStruct,
      Types.MarketsLiquidationStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "isPositionLiquidable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toLiquidateVars",
    data: BytesLike
  ): Result;
}

export interface OpenLevV1Lib extends BaseContract {
  connect(runner?: ContractRunner | null): OpenLevV1Lib;
  waitForDeployment(): Promise<this>;

  interface: OpenLevV1LibInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  isPositionLiquidable: TypedContractMethod<
    [
      trade: Types.TradeStruct,
      isSameToken: boolean,
      amount: BigNumberish,
      vars: Types.MarketVarsStruct,
      dexData: BytesLike,
      liquidationRate: BigNumberish
    ],
    [boolean],
    "view"
  >;

  marginRatio: TypedContractMethod<
    [
      marketId: BigNumberish,
      owner: AddressLike,
      longToken: boolean,
      dexData: BytesLike
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        current: bigint;
        cAvg: bigint;
        hAvg: bigint;
        limit: bigint;
      }
    ],
    "view"
  >;

  toLiquidateVars: TypedContractMethod<
    [
      borrowed: BigNumberish,
      longToken: boolean,
      dexData: BytesLike,
      trade: Types.TradeStruct,
      marketVars: Types.MarketVarsStruct,
      marketsLiquidationVar: Types.MarketsLiquidationStruct
    ],
    [Types.LiquidateVarsStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "isPositionLiquidable"
  ): TypedContractMethod<
    [
      trade: Types.TradeStruct,
      isSameToken: boolean,
      amount: BigNumberish,
      vars: Types.MarketVarsStruct,
      dexData: BytesLike,
      liquidationRate: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "marginRatio"
  ): TypedContractMethod<
    [
      marketId: BigNumberish,
      owner: AddressLike,
      longToken: boolean,
      dexData: BytesLike
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        current: bigint;
        cAvg: bigint;
        hAvg: bigint;
        limit: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "toLiquidateVars"
  ): TypedContractMethod<
    [
      borrowed: BigNumberish,
      longToken: boolean,
      dexData: BytesLike,
      trade: Types.TradeStruct,
      marketVars: Types.MarketVarsStruct,
      marketsLiquidationVar: Types.MarketsLiquidationStruct
    ],
    [Types.LiquidateVarsStructOutput],
    "view"
  >;

  filters: {};
}
