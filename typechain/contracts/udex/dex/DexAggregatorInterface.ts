/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface DexAggregatorInterfaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buy"
      | "calBuyAmount"
      | "calSellAmount"
      | "getAvgPrice"
      | "getPairLiquidity"
      | "getPrice"
      | "getPriceCAvgPriceHAvgPrice"
      | "getToken0Liquidity"
      | "sell"
      | "sellMul"
      | "setDexInfo"
      | "updatePriceOracle"
      | "updateV3Observation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buy",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calBuyAmount",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calSellAmount",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvgPrice",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairLiquidity",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceCAvgPriceHAvgPrice",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getToken0Liquidity",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sellMul",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDexInfo",
    values: [BigNumberish[], AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceOracle",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateV3Observation",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calBuyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calSellAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvgPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceCAvgPriceHAvgPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getToken0Liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellMul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDexInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateV3Observation",
    data: BytesLike
  ): Result;
}

export interface DexAggregatorInterface extends BaseContract {
  connect(runner?: ContractRunner | null): DexAggregatorInterface;
  waitForDeployment(): Promise<this>;

  interface: DexAggregatorInterfaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buy: TypedContractMethod<
    [
      buyToken: AddressLike,
      sellToken: AddressLike,
      buyTax: BigNumberish,
      sellTax: BigNumberish,
      buyAmount: BigNumberish,
      maxSellAmount: BigNumberish,
      data: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  calBuyAmount: TypedContractMethod<
    [
      buyToken: AddressLike,
      sellToken: AddressLike,
      buyTax: BigNumberish,
      sellTax: BigNumberish,
      sellAmount: BigNumberish,
      data: BytesLike
    ],
    [bigint],
    "view"
  >;

  calSellAmount: TypedContractMethod<
    [
      buyToken: AddressLike,
      sellToken: AddressLike,
      buyTax: BigNumberish,
      sellTax: BigNumberish,
      buyAmount: BigNumberish,
      data: BytesLike
    ],
    [bigint],
    "view"
  >;

  getAvgPrice: TypedContractMethod<
    [
      desToken: AddressLike,
      quoteToken: AddressLike,
      secondsAgo: BigNumberish,
      data: BytesLike
    ],
    [
      [bigint, bigint, bigint] & {
        price: bigint;
        decimals: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getPairLiquidity: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, dexData: BytesLike],
    [[bigint, bigint] & { token0Liq: bigint; token1Liq: bigint }],
    "view"
  >;

  getPrice: TypedContractMethod<
    [desToken: AddressLike, quoteToken: AddressLike, data: BytesLike],
    [[bigint, bigint] & { price: bigint; decimals: bigint }],
    "view"
  >;

  getPriceCAvgPriceHAvgPrice: TypedContractMethod<
    [
      desToken: AddressLike,
      quoteToken: AddressLike,
      secondsAgo: BigNumberish,
      dexData: BytesLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        price: bigint;
        cAvgPrice: bigint;
        hAvgPrice: bigint;
        decimals: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getToken0Liquidity: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, dexData: BytesLike],
    [bigint],
    "view"
  >;

  sell: TypedContractMethod<
    [
      buyToken: AddressLike,
      sellToken: AddressLike,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      data: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  sellMul: TypedContractMethod<
    [sellAmount: BigNumberish, minBuyAmount: BigNumberish, data: BytesLike],
    [bigint],
    "nonpayable"
  >;

  setDexInfo: TypedContractMethod<
    [dexName: BigNumberish[], factoryAddr: AddressLike[], fees: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  updatePriceOracle: TypedContractMethod<
    [
      desToken: AddressLike,
      quoteToken: AddressLike,
      timeWindow: BigNumberish,
      data: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  updateV3Observation: TypedContractMethod<
    [desToken: AddressLike, quoteToken: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<
    [
      buyToken: AddressLike,
      sellToken: AddressLike,
      buyTax: BigNumberish,
      sellTax: BigNumberish,
      buyAmount: BigNumberish,
      maxSellAmount: BigNumberish,
      data: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calBuyAmount"
  ): TypedContractMethod<
    [
      buyToken: AddressLike,
      sellToken: AddressLike,
      buyTax: BigNumberish,
      sellTax: BigNumberish,
      sellAmount: BigNumberish,
      data: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calSellAmount"
  ): TypedContractMethod<
    [
      buyToken: AddressLike,
      sellToken: AddressLike,
      buyTax: BigNumberish,
      sellTax: BigNumberish,
      buyAmount: BigNumberish,
      data: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAvgPrice"
  ): TypedContractMethod<
    [
      desToken: AddressLike,
      quoteToken: AddressLike,
      secondsAgo: BigNumberish,
      data: BytesLike
    ],
    [
      [bigint, bigint, bigint] & {
        price: bigint;
        decimals: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPairLiquidity"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, dexData: BytesLike],
    [[bigint, bigint] & { token0Liq: bigint; token1Liq: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [desToken: AddressLike, quoteToken: AddressLike, data: BytesLike],
    [[bigint, bigint] & { price: bigint; decimals: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriceCAvgPriceHAvgPrice"
  ): TypedContractMethod<
    [
      desToken: AddressLike,
      quoteToken: AddressLike,
      secondsAgo: BigNumberish,
      dexData: BytesLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        price: bigint;
        cAvgPrice: bigint;
        hAvgPrice: bigint;
        decimals: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getToken0Liquidity"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, dexData: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "sell"
  ): TypedContractMethod<
    [
      buyToken: AddressLike,
      sellToken: AddressLike,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      data: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sellMul"
  ): TypedContractMethod<
    [sellAmount: BigNumberish, minBuyAmount: BigNumberish, data: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDexInfo"
  ): TypedContractMethod<
    [dexName: BigNumberish[], factoryAddr: AddressLike[], fees: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePriceOracle"
  ): TypedContractMethod<
    [
      desToken: AddressLike,
      quoteToken: AddressLike,
      timeWindow: BigNumberish,
      data: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateV3Observation"
  ): TypedContractMethod<
    [desToken: AddressLike, quoteToken: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
