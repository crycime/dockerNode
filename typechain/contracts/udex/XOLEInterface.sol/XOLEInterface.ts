/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface XOLEInterfaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOf"
      | "claimableTokenAmount"
      | "convertToSharingToken"
      | "create_lock"
      | "create_lock_for"
      | "getLockedAmount"
      | "increase_amount"
      | "increase_amount_for"
      | "increase_unlock_time"
      | "setDev"
      | "setDevFundRatio"
      | "setDexAgg"
      | "setOleLpStakeAutomator"
      | "setOleLpStakeToken"
      | "setShareToken"
      | "shareableTokenAmount"
      | "withdraw"
      | "withdrawCommunityFund"
      | "withdrawDevFund"
      | "withdrawOle"
      | "withdraw_automator"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableTokenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertToSharingToken",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "create_lock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "create_lock_for",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_amount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_amount_for",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_unlock_time",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setDev", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setDevFundRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDexAgg",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOleLpStakeAutomator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOleLpStakeToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setShareToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shareableTokenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawCommunityFund",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDevFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw_automator",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToSharingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create_lock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create_lock_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_amount_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_unlock_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDevFundRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDexAgg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOleLpStakeAutomator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOleLpStakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShareToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareableTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCommunityFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDevFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw_automator",
    data: BytesLike
  ): Result;
}

export interface XOLEInterface extends BaseContract {
  connect(runner?: ContractRunner | null): XOLEInterface;
  waitForDeployment(): Promise<this>;

  interface: XOLEInterfaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<[addr: AddressLike], [bigint], "view">;

  claimableTokenAmount: TypedContractMethod<[], [bigint], "view">;

  convertToSharingToken: TypedContractMethod<
    [amount: BigNumberish, minBuyAmount: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  create_lock: TypedContractMethod<
    [_value: BigNumberish, _unlock_time: BigNumberish],
    [void],
    "nonpayable"
  >;

  create_lock_for: TypedContractMethod<
    [to: AddressLike, _value: BigNumberish, _unlock_time: BigNumberish],
    [void],
    "nonpayable"
  >;

  getLockedAmount: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  increase_amount: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  increase_amount_for: TypedContractMethod<
    [to: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  increase_unlock_time: TypedContractMethod<
    [_unlock_time: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDev: TypedContractMethod<[newDev: AddressLike], [void], "nonpayable">;

  setDevFundRatio: TypedContractMethod<
    [newRatio: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDexAgg: TypedContractMethod<
    [newDexAgg: AddressLike],
    [void],
    "nonpayable"
  >;

  setOleLpStakeAutomator: TypedContractMethod<
    [_oleLpStakeAutomator: AddressLike],
    [void],
    "nonpayable"
  >;

  setOleLpStakeToken: TypedContractMethod<
    [_oleLpStakeToken: AddressLike],
    [void],
    "nonpayable"
  >;

  setShareToken: TypedContractMethod<
    [_shareToken: AddressLike],
    [void],
    "nonpayable"
  >;

  shareableTokenAmount: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  withdrawCommunityFund: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawDevFund: TypedContractMethod<[], [void], "nonpayable">;

  withdrawOle: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  withdraw_automator: TypedContractMethod<
    [owner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimableTokenAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertToSharingToken"
  ): TypedContractMethod<
    [amount: BigNumberish, minBuyAmount: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "create_lock"
  ): TypedContractMethod<
    [_value: BigNumberish, _unlock_time: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "create_lock_for"
  ): TypedContractMethod<
    [to: AddressLike, _value: BigNumberish, _unlock_time: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getLockedAmount"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "increase_amount"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "increase_amount_for"
  ): TypedContractMethod<
    [to: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increase_unlock_time"
  ): TypedContractMethod<[_unlock_time: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDev"
  ): TypedContractMethod<[newDev: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDevFundRatio"
  ): TypedContractMethod<[newRatio: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDexAgg"
  ): TypedContractMethod<[newDexAgg: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOleLpStakeAutomator"
  ): TypedContractMethod<
    [_oleLpStakeAutomator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOleLpStakeToken"
  ): TypedContractMethod<[_oleLpStakeToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setShareToken"
  ): TypedContractMethod<[_shareToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shareableTokenAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawCommunityFund"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawDevFund"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawOle"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw_automator"
  ): TypedContractMethod<[owner: AddressLike], [void], "nonpayable">;

  filters: {};
}
