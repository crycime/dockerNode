/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Callee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Callee__factory>;
    getContractFactory(
      name: "IUniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2ERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "UniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2ERC20__factory>;
    getContractFactory(
      name: "UniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Factory__factory>;
    getContractFactory(
      name: "UniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Pair__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "UniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Router02__factory>;
    getContractFactory(
      name: "IUniswapV3FlashCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3FlashCallback__factory>;
    getContractFactory(
      name: "IUniswapV3MintCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3MintCallback__factory>;
    getContractFactory(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3SwapCallback__factory>;
    getContractFactory(
      name: "IERC20Minimal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Minimal__factory>;
    getContractFactory(
      name: "IUniswapV3Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Factory__factory>;
    getContractFactory(
      name: "IUniswapV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Pool__factory>;
    getContractFactory(
      name: "IUniswapV3PoolDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolDeployer__factory>;
    getContractFactory(
      name: "IUniswapV3PoolActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolActions__factory>;
    getContractFactory(
      name: "IUniswapV3PoolDerivedState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolDerivedState__factory>;
    getContractFactory(
      name: "IUniswapV3PoolEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolEvents__factory>;
    getContractFactory(
      name: "IUniswapV3PoolImmutables",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolImmutables__factory>;
    getContractFactory(
      name: "IUniswapV3PoolOwnerActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolOwnerActions__factory>;
    getContractFactory(
      name: "IUniswapV3PoolState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolState__factory>;
    getContractFactory(
      name: "Adminable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Adminable__factory>;
    getContractFactory(
      name: "Airdrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Airdrop__factory>;
    getContractFactory(
      name: "ControllerDelegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ControllerDelegator__factory>;
    getContractFactory(
      name: "ControllerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ControllerInterface__factory>;
    getContractFactory(
      name: "ControllerStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ControllerStorage__factory>;
    getContractFactory(
      name: "ControllerV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ControllerV1__factory>;
    getContractFactory(
      name: "IOPBorrowing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOPBorrowing__factory>;
    getContractFactory(
      name: "IOpenLev",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOpenLev__factory>;
    getContractFactory(
      name: "DelegateInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegateInterface__factory>;
    getContractFactory(
      name: "DelegatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegatorInterface__factory>;
    getContractFactory(
      name: "ArbitrumDexAggregatorV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumDexAggregatorV1__factory>;
    getContractFactory(
      name: "UniV3Dex",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniV3Dex__factory>;
    getContractFactory(
      name: "BscDexAggregatorV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BscDexAggregatorV1__factory>;
    getContractFactory(
      name: "IBiSwapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBiSwapPair__factory>;
    getContractFactory(
      name: "IMdexFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMdexFactory__factory>;
    getContractFactory(
      name: "CronosDexAggregatorV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CronosDexAggregatorV1__factory>;
    getContractFactory(
      name: "DexAggregatorDelegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexAggregatorDelegator__factory>;
    getContractFactory(
      name: "DexAggregatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexAggregatorInterface__factory>;
    getContractFactory(
      name: "EthDexAggregatorV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthDexAggregatorV1__factory>;
    getContractFactory(
      name: "UniV3Dex",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniV3Dex__factory>;
    getContractFactory(
      name: "KccDexAggregatorV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KccDexAggregatorV1__factory>;
    getContractFactory(
      name: "IKuswapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKuswapPair__factory>;
    getContractFactory(
      name: "IMojitoPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMojitoPair__factory>;
    getContractFactory(
      name: "FarmingPools",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FarmingPools__factory>;
    getContractFactory(
      name: "GovernorAlpha",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorAlpha__factory>;
    getContractFactory(
      name: "OLEToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OLEToken__factory>;
    getContractFactory(
      name: "Timelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Timelock__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "LPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPool__factory>;
    getContractFactory(
      name: "LPoolDelegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPoolDelegator__factory>;
    getContractFactory(
      name: "LPoolDepositor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPoolDepositor__factory>;
    getContractFactory(
      name: "LPoolDepositorDelegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPoolDepositorDelegator__factory>;
    getContractFactory(
      name: "LPoolInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPoolInterface__factory>;
    getContractFactory(
      name: "LPoolStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPoolStorage__factory>;
    getContractFactory(
      name: "LTimePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LTimePool__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "OleLpStakeAutomator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OleLpStakeAutomator__factory>;
    getContractFactory(
      name: "OleLpStakeAutomatorDelegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OleLpStakeAutomatorDelegator__factory>;
    getContractFactory(
      name: "OleLpStakeAutomatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OleLpStakeAutomatorInterface__factory>;
    getContractFactory(
      name: "OleLpStakeAutomatorStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OleLpStakeAutomatorStorage__factory>;
    getContractFactory(
      name: "OLETokenLock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OLETokenLock__factory>;
    getContractFactory(
      name: "OpenLevDelegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpenLevDelegator__factory>;
    getContractFactory(
      name: "OpenLevInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpenLevInterface__factory>;
    getContractFactory(
      name: "OpenLevStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpenLevStorage__factory>;
    getContractFactory(
      name: "OpenLevV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpenLevV1__factory>;
    getContractFactory(
      name: "OpenLevV1Lib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpenLevV1Lib__factory>;
    getContractFactory(
      name: "BatchQueryHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchQueryHelper__factory>;
    getContractFactory(
      name: "IOpenLev",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOpenLev__factory>;
    getContractFactory(
      name: "IV3Quoter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IV3Quoter__factory>;
    getContractFactory(
      name: "IXOLE",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IXOLE__factory>;
    getContractFactory(
      name: "QueryHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QueryHelper__factory>;
    getContractFactory(
      name: "Reserve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Reserve__factory>;
    getContractFactory(
      name: "Delegate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Delegate__factory>;
    getContractFactory(
      name: "Delegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Delegator__factory>;
    getContractFactory(
      name: "Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Interface__factory>;
    getContractFactory(
      name: "IUniswapV2Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router__factory>;
    getContractFactory(
      name: "COREToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.COREToken__factory>;
    getContractFactory(
      name: "DAIToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DAIToken__factory>;
    getContractFactory(
      name: "DPIToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DPIToken__factory>;
    getContractFactory(
      name: "FEIToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FEIToken__factory>;
    getContractFactory(
      name: "FraxToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FraxToken__factory>;
    getContractFactory(
      name: "RAIToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RAIToken__factory>;
    getContractFactory(
      name: "UNIToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UNIToken__factory>;
    getContractFactory(
      name: "USDCToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.USDCToken__factory>;
    getContractFactory(
      name: "USDTToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.USDTToken__factory>;
    getContractFactory(
      name: "WBTCToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WBTCToken__factory>;
    getContractFactory(
      name: "WETHToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETHToken__factory>;
    getContractFactory(
      name: "WISEToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WISEToken__factory>;
    getContractFactory(
      name: "XORToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XORToken__factory>;
    getContractFactory(
      name: "IAggregationExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAggregationExecutor__factory>;
    getContractFactory(
      name: "Mock1inchRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mock1inchRouter__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "MockOpBorrowing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOpBorrowing__factory>;
    getContractFactory(
      name: "MockOpenLevV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOpenLevV1__factory>;
    getContractFactory(
      name: "MockTaxToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockTaxToken__factory>;
    getContractFactory(
      name: "MockTLAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockTLAdmin__factory>;
    getContractFactory(
      name: "MockUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUniswapV2Factory__factory>;
    getContractFactory(
      name: "MockUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUniswapV2Pair__factory>;
    getContractFactory(
      name: "MockUniswapV3Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUniswapV3Factory__factory>;
    getContractFactory(
      name: "MockUniswapV3Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUniswapV3Pair__factory>;
    getContractFactory(
      name: "Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Storage__factory>;
    getContractFactory(
      name: "UniswapSwapHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapSwapHelper__factory>;
    getContractFactory(
      name: "UpgradeControllerV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeControllerV2__factory>;
    getContractFactory(
      name: "UpgradeLPoolV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeLPoolV2__factory>;
    getContractFactory(
      name: "WETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH__factory>;
    getContractFactory(
      name: "XOLE",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XOLE__factory>;
    getContractFactory(
      name: "XOLEDelegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XOLEDelegator__factory>;
    getContractFactory(
      name: "XOLEInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XOLEInterface__factory>;
    getContractFactory(
      name: "XOLEStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XOLEStorage__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUniswapV2Callee",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Callee>;
    getContractAt(
      name: "IUniswapV2ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2ERC20>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "UniswapV2ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2ERC20>;
    getContractAt(
      name: "UniswapV2Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Factory>;
    getContractAt(
      name: "UniswapV2Pair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Pair>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "UniswapV2Router02",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Router02>;
    getContractAt(
      name: "IUniswapV3FlashCallback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3FlashCallback>;
    getContractAt(
      name: "IUniswapV3MintCallback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3MintCallback>;
    getContractAt(
      name: "IUniswapV3SwapCallback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    getContractAt(
      name: "IERC20Minimal",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Minimal>;
    getContractAt(
      name: "IUniswapV3Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3Factory>;
    getContractAt(
      name: "IUniswapV3Pool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3Pool>;
    getContractAt(
      name: "IUniswapV3PoolDeployer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolDeployer>;
    getContractAt(
      name: "IUniswapV3PoolActions",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolActions>;
    getContractAt(
      name: "IUniswapV3PoolDerivedState",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolDerivedState>;
    getContractAt(
      name: "IUniswapV3PoolEvents",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolEvents>;
    getContractAt(
      name: "IUniswapV3PoolImmutables",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolImmutables>;
    getContractAt(
      name: "IUniswapV3PoolOwnerActions",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolOwnerActions>;
    getContractAt(
      name: "IUniswapV3PoolState",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolState>;
    getContractAt(
      name: "Adminable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Adminable>;
    getContractAt(
      name: "Airdrop",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Airdrop>;
    getContractAt(
      name: "ControllerDelegator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ControllerDelegator>;
    getContractAt(
      name: "ControllerInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ControllerInterface>;
    getContractAt(
      name: "ControllerStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ControllerStorage>;
    getContractAt(
      name: "ControllerV1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ControllerV1>;
    getContractAt(
      name: "IOPBorrowing",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOPBorrowing>;
    getContractAt(
      name: "IOpenLev",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOpenLev>;
    getContractAt(
      name: "DelegateInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegateInterface>;
    getContractAt(
      name: "DelegatorInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegatorInterface>;
    getContractAt(
      name: "ArbitrumDexAggregatorV1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbitrumDexAggregatorV1>;
    getContractAt(
      name: "UniV3Dex",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniV3Dex>;
    getContractAt(
      name: "BscDexAggregatorV1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BscDexAggregatorV1>;
    getContractAt(
      name: "IBiSwapPair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBiSwapPair>;
    getContractAt(
      name: "IMdexFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMdexFactory>;
    getContractAt(
      name: "CronosDexAggregatorV1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CronosDexAggregatorV1>;
    getContractAt(
      name: "DexAggregatorDelegator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DexAggregatorDelegator>;
    getContractAt(
      name: "DexAggregatorInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DexAggregatorInterface>;
    getContractAt(
      name: "EthDexAggregatorV1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EthDexAggregatorV1>;
    getContractAt(
      name: "UniV3Dex",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniV3Dex>;
    getContractAt(
      name: "KccDexAggregatorV1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.KccDexAggregatorV1>;
    getContractAt(
      name: "IKuswapPair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IKuswapPair>;
    getContractAt(
      name: "IMojitoPair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMojitoPair>;
    getContractAt(
      name: "FarmingPools",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FarmingPools>;
    getContractAt(
      name: "GovernorAlpha",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorAlpha>;
    getContractAt(
      name: "OLEToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OLEToken>;
    getContractAt(
      name: "Timelock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Timelock>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "LPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LPool>;
    getContractAt(
      name: "LPoolDelegator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LPoolDelegator>;
    getContractAt(
      name: "LPoolDepositor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LPoolDepositor>;
    getContractAt(
      name: "LPoolDepositorDelegator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LPoolDepositorDelegator>;
    getContractAt(
      name: "LPoolInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LPoolInterface>;
    getContractAt(
      name: "LPoolStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LPoolStorage>;
    getContractAt(
      name: "LTimePool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LTimePool>;
    getContractAt(
      name: "Migrations",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "OleLpStakeAutomator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OleLpStakeAutomator>;
    getContractAt(
      name: "OleLpStakeAutomatorDelegator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OleLpStakeAutomatorDelegator>;
    getContractAt(
      name: "OleLpStakeAutomatorInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OleLpStakeAutomatorInterface>;
    getContractAt(
      name: "OleLpStakeAutomatorStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OleLpStakeAutomatorStorage>;
    getContractAt(
      name: "OLETokenLock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OLETokenLock>;
    getContractAt(
      name: "OpenLevDelegator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OpenLevDelegator>;
    getContractAt(
      name: "OpenLevInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OpenLevInterface>;
    getContractAt(
      name: "OpenLevStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OpenLevStorage>;
    getContractAt(
      name: "OpenLevV1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OpenLevV1>;
    getContractAt(
      name: "OpenLevV1Lib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OpenLevV1Lib>;
    getContractAt(
      name: "BatchQueryHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BatchQueryHelper>;
    getContractAt(
      name: "IOpenLev",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOpenLev>;
    getContractAt(
      name: "IV3Quoter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IV3Quoter>;
    getContractAt(
      name: "IXOLE",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IXOLE>;
    getContractAt(
      name: "QueryHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QueryHelper>;
    getContractAt(
      name: "Reserve",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Reserve>;
    getContractAt(
      name: "Delegate",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Delegate>;
    getContractAt(
      name: "Delegator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Delegator>;
    getContractAt(
      name: "Interface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Interface>;
    getContractAt(
      name: "IUniswapV2Router",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router>;
    getContractAt(
      name: "COREToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.COREToken>;
    getContractAt(
      name: "DAIToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DAIToken>;
    getContractAt(
      name: "DPIToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DPIToken>;
    getContractAt(
      name: "FEIToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FEIToken>;
    getContractAt(
      name: "FraxToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FraxToken>;
    getContractAt(
      name: "RAIToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RAIToken>;
    getContractAt(
      name: "UNIToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UNIToken>;
    getContractAt(
      name: "USDCToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.USDCToken>;
    getContractAt(
      name: "USDTToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.USDTToken>;
    getContractAt(
      name: "WBTCToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WBTCToken>;
    getContractAt(
      name: "WETHToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WETHToken>;
    getContractAt(
      name: "WISEToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WISEToken>;
    getContractAt(
      name: "XORToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.XORToken>;
    getContractAt(
      name: "IAggregationExecutor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAggregationExecutor>;
    getContractAt(
      name: "Mock1inchRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Mock1inchRouter>;
    getContractAt(
      name: "MockERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "MockOpBorrowing",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOpBorrowing>;
    getContractAt(
      name: "MockOpenLevV1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOpenLevV1>;
    getContractAt(
      name: "MockTaxToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockTaxToken>;
    getContractAt(
      name: "MockTLAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockTLAdmin>;
    getContractAt(
      name: "MockUniswapV2Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockUniswapV2Factory>;
    getContractAt(
      name: "MockUniswapV2Pair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockUniswapV2Pair>;
    getContractAt(
      name: "MockUniswapV3Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockUniswapV3Factory>;
    getContractAt(
      name: "MockUniswapV3Pair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockUniswapV3Pair>;
    getContractAt(
      name: "Storage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Storage>;
    getContractAt(
      name: "UniswapSwapHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapSwapHelper>;
    getContractAt(
      name: "UpgradeControllerV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeControllerV2>;
    getContractAt(
      name: "UpgradeLPoolV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeLPoolV2>;
    getContractAt(
      name: "WETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH>;
    getContractAt(
      name: "XOLE",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.XOLE>;
    getContractAt(
      name: "XOLEDelegator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.XOLEDelegator>;
    getContractAt(
      name: "XOLEInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.XOLEInterface>;
    getContractAt(
      name: "XOLEStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.XOLEStorage>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IUniswapV2Callee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Callee>;
    deployContract(
      name: "IUniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2ERC20>;
    deployContract(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory>;
    deployContract(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair>;
    deployContract(
      name: "UniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2ERC20>;
    deployContract(
      name: "UniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Factory>;
    deployContract(
      name: "UniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Pair>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01>;
    deployContract(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "UniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Router02>;
    deployContract(
      name: "IUniswapV3FlashCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3FlashCallback>;
    deployContract(
      name: "IUniswapV3MintCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3MintCallback>;
    deployContract(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    deployContract(
      name: "IERC20Minimal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Minimal>;
    deployContract(
      name: "IUniswapV3Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Factory>;
    deployContract(
      name: "IUniswapV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Pool>;
    deployContract(
      name: "IUniswapV3PoolDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolDeployer>;
    deployContract(
      name: "IUniswapV3PoolActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolActions>;
    deployContract(
      name: "IUniswapV3PoolDerivedState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolDerivedState>;
    deployContract(
      name: "IUniswapV3PoolEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolEvents>;
    deployContract(
      name: "IUniswapV3PoolImmutables",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolImmutables>;
    deployContract(
      name: "IUniswapV3PoolOwnerActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolOwnerActions>;
    deployContract(
      name: "IUniswapV3PoolState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolState>;
    deployContract(
      name: "Adminable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Adminable>;
    deployContract(
      name: "Airdrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Airdrop>;
    deployContract(
      name: "ControllerDelegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ControllerDelegator>;
    deployContract(
      name: "ControllerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ControllerInterface>;
    deployContract(
      name: "ControllerStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ControllerStorage>;
    deployContract(
      name: "ControllerV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ControllerV1>;
    deployContract(
      name: "IOPBorrowing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOPBorrowing>;
    deployContract(
      name: "IOpenLev",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOpenLev>;
    deployContract(
      name: "DelegateInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegateInterface>;
    deployContract(
      name: "DelegatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegatorInterface>;
    deployContract(
      name: "ArbitrumDexAggregatorV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumDexAggregatorV1>;
    deployContract(
      name: "UniV3Dex",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniV3Dex>;
    deployContract(
      name: "BscDexAggregatorV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BscDexAggregatorV1>;
    deployContract(
      name: "IBiSwapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBiSwapPair>;
    deployContract(
      name: "IMdexFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMdexFactory>;
    deployContract(
      name: "CronosDexAggregatorV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CronosDexAggregatorV1>;
    deployContract(
      name: "DexAggregatorDelegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexAggregatorDelegator>;
    deployContract(
      name: "DexAggregatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexAggregatorInterface>;
    deployContract(
      name: "EthDexAggregatorV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthDexAggregatorV1>;
    deployContract(
      name: "UniV3Dex",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniV3Dex>;
    deployContract(
      name: "KccDexAggregatorV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KccDexAggregatorV1>;
    deployContract(
      name: "IKuswapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKuswapPair>;
    deployContract(
      name: "IMojitoPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMojitoPair>;
    deployContract(
      name: "FarmingPools",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FarmingPools>;
    deployContract(
      name: "GovernorAlpha",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorAlpha>;
    deployContract(
      name: "OLEToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OLEToken>;
    deployContract(
      name: "Timelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Timelock>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "LPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPool>;
    deployContract(
      name: "LPoolDelegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPoolDelegator>;
    deployContract(
      name: "LPoolDepositor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPoolDepositor>;
    deployContract(
      name: "LPoolDepositorDelegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPoolDepositorDelegator>;
    deployContract(
      name: "LPoolInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPoolInterface>;
    deployContract(
      name: "LPoolStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPoolStorage>;
    deployContract(
      name: "LTimePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LTimePool>;
    deployContract(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations>;
    deployContract(
      name: "OleLpStakeAutomator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OleLpStakeAutomator>;
    deployContract(
      name: "OleLpStakeAutomatorDelegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OleLpStakeAutomatorDelegator>;
    deployContract(
      name: "OleLpStakeAutomatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OleLpStakeAutomatorInterface>;
    deployContract(
      name: "OleLpStakeAutomatorStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OleLpStakeAutomatorStorage>;
    deployContract(
      name: "OLETokenLock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OLETokenLock>;
    deployContract(
      name: "OpenLevDelegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpenLevDelegator>;
    deployContract(
      name: "OpenLevInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpenLevInterface>;
    deployContract(
      name: "OpenLevStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpenLevStorage>;
    deployContract(
      name: "OpenLevV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpenLevV1>;
    deployContract(
      name: "OpenLevV1Lib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpenLevV1Lib>;
    deployContract(
      name: "BatchQueryHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchQueryHelper>;
    deployContract(
      name: "IOpenLev",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOpenLev>;
    deployContract(
      name: "IV3Quoter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IV3Quoter>;
    deployContract(
      name: "IXOLE",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IXOLE>;
    deployContract(
      name: "QueryHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QueryHelper>;
    deployContract(
      name: "Reserve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Reserve>;
    deployContract(
      name: "Delegate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Delegate>;
    deployContract(
      name: "Delegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Delegator>;
    deployContract(
      name: "Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Interface>;
    deployContract(
      name: "IUniswapV2Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router>;
    deployContract(
      name: "COREToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.COREToken>;
    deployContract(
      name: "DAIToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DAIToken>;
    deployContract(
      name: "DPIToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DPIToken>;
    deployContract(
      name: "FEIToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FEIToken>;
    deployContract(
      name: "FraxToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FraxToken>;
    deployContract(
      name: "RAIToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RAIToken>;
    deployContract(
      name: "UNIToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UNIToken>;
    deployContract(
      name: "USDCToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.USDCToken>;
    deployContract(
      name: "USDTToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.USDTToken>;
    deployContract(
      name: "WBTCToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WBTCToken>;
    deployContract(
      name: "WETHToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETHToken>;
    deployContract(
      name: "WISEToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WISEToken>;
    deployContract(
      name: "XORToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XORToken>;
    deployContract(
      name: "IAggregationExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAggregationExecutor>;
    deployContract(
      name: "Mock1inchRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mock1inchRouter>;
    deployContract(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20>;
    deployContract(
      name: "MockOpBorrowing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOpBorrowing>;
    deployContract(
      name: "MockOpenLevV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOpenLevV1>;
    deployContract(
      name: "MockTaxToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockTaxToken>;
    deployContract(
      name: "MockTLAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockTLAdmin>;
    deployContract(
      name: "MockUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUniswapV2Factory>;
    deployContract(
      name: "MockUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUniswapV2Pair>;
    deployContract(
      name: "MockUniswapV3Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUniswapV3Factory>;
    deployContract(
      name: "MockUniswapV3Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUniswapV3Pair>;
    deployContract(
      name: "Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Storage>;
    deployContract(
      name: "UniswapSwapHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapSwapHelper>;
    deployContract(
      name: "UpgradeControllerV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeControllerV2>;
    deployContract(
      name: "UpgradeLPoolV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeLPoolV2>;
    deployContract(
      name: "WETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH>;
    deployContract(
      name: "XOLE",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XOLE>;
    deployContract(
      name: "XOLEDelegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XOLEDelegator>;
    deployContract(
      name: "XOLEInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XOLEInterface>;
    deployContract(
      name: "XOLEStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XOLEStorage>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IUniswapV2Callee",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Callee>;
    deployContract(
      name: "IUniswapV2ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2ERC20>;
    deployContract(
      name: "IUniswapV2Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory>;
    deployContract(
      name: "IUniswapV2Pair",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair>;
    deployContract(
      name: "UniswapV2ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2ERC20>;
    deployContract(
      name: "UniswapV2Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Factory>;
    deployContract(
      name: "UniswapV2Pair",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Pair>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IUniswapV2Router01",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01>;
    deployContract(
      name: "IUniswapV2Router02",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "UniswapV2Router02",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Router02>;
    deployContract(
      name: "IUniswapV3FlashCallback",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3FlashCallback>;
    deployContract(
      name: "IUniswapV3MintCallback",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3MintCallback>;
    deployContract(
      name: "IUniswapV3SwapCallback",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    deployContract(
      name: "IERC20Minimal",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Minimal>;
    deployContract(
      name: "IUniswapV3Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Factory>;
    deployContract(
      name: "IUniswapV3Pool",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Pool>;
    deployContract(
      name: "IUniswapV3PoolDeployer",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolDeployer>;
    deployContract(
      name: "IUniswapV3PoolActions",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolActions>;
    deployContract(
      name: "IUniswapV3PoolDerivedState",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolDerivedState>;
    deployContract(
      name: "IUniswapV3PoolEvents",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolEvents>;
    deployContract(
      name: "IUniswapV3PoolImmutables",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolImmutables>;
    deployContract(
      name: "IUniswapV3PoolOwnerActions",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolOwnerActions>;
    deployContract(
      name: "IUniswapV3PoolState",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolState>;
    deployContract(
      name: "Adminable",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Adminable>;
    deployContract(
      name: "Airdrop",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Airdrop>;
    deployContract(
      name: "ControllerDelegator",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ControllerDelegator>;
    deployContract(
      name: "ControllerInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ControllerInterface>;
    deployContract(
      name: "ControllerStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ControllerStorage>;
    deployContract(
      name: "ControllerV1",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ControllerV1>;
    deployContract(
      name: "IOPBorrowing",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOPBorrowing>;
    deployContract(
      name: "IOpenLev",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOpenLev>;
    deployContract(
      name: "DelegateInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegateInterface>;
    deployContract(
      name: "DelegatorInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegatorInterface>;
    deployContract(
      name: "ArbitrumDexAggregatorV1",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumDexAggregatorV1>;
    deployContract(
      name: "UniV3Dex",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniV3Dex>;
    deployContract(
      name: "BscDexAggregatorV1",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BscDexAggregatorV1>;
    deployContract(
      name: "IBiSwapPair",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBiSwapPair>;
    deployContract(
      name: "IMdexFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMdexFactory>;
    deployContract(
      name: "CronosDexAggregatorV1",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CronosDexAggregatorV1>;
    deployContract(
      name: "DexAggregatorDelegator",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexAggregatorDelegator>;
    deployContract(
      name: "DexAggregatorInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexAggregatorInterface>;
    deployContract(
      name: "EthDexAggregatorV1",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthDexAggregatorV1>;
    deployContract(
      name: "UniV3Dex",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniV3Dex>;
    deployContract(
      name: "KccDexAggregatorV1",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KccDexAggregatorV1>;
    deployContract(
      name: "IKuswapPair",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKuswapPair>;
    deployContract(
      name: "IMojitoPair",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMojitoPair>;
    deployContract(
      name: "FarmingPools",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FarmingPools>;
    deployContract(
      name: "GovernorAlpha",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorAlpha>;
    deployContract(
      name: "OLEToken",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OLEToken>;
    deployContract(
      name: "Timelock",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Timelock>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "LPool",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPool>;
    deployContract(
      name: "LPoolDelegator",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPoolDelegator>;
    deployContract(
      name: "LPoolDepositor",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPoolDepositor>;
    deployContract(
      name: "LPoolDepositorDelegator",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPoolDepositorDelegator>;
    deployContract(
      name: "LPoolInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPoolInterface>;
    deployContract(
      name: "LPoolStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPoolStorage>;
    deployContract(
      name: "LTimePool",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LTimePool>;
    deployContract(
      name: "Migrations",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations>;
    deployContract(
      name: "OleLpStakeAutomator",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OleLpStakeAutomator>;
    deployContract(
      name: "OleLpStakeAutomatorDelegator",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OleLpStakeAutomatorDelegator>;
    deployContract(
      name: "OleLpStakeAutomatorInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OleLpStakeAutomatorInterface>;
    deployContract(
      name: "OleLpStakeAutomatorStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OleLpStakeAutomatorStorage>;
    deployContract(
      name: "OLETokenLock",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OLETokenLock>;
    deployContract(
      name: "OpenLevDelegator",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpenLevDelegator>;
    deployContract(
      name: "OpenLevInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpenLevInterface>;
    deployContract(
      name: "OpenLevStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpenLevStorage>;
    deployContract(
      name: "OpenLevV1",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpenLevV1>;
    deployContract(
      name: "OpenLevV1Lib",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpenLevV1Lib>;
    deployContract(
      name: "BatchQueryHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchQueryHelper>;
    deployContract(
      name: "IOpenLev",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOpenLev>;
    deployContract(
      name: "IV3Quoter",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IV3Quoter>;
    deployContract(
      name: "IXOLE",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IXOLE>;
    deployContract(
      name: "QueryHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QueryHelper>;
    deployContract(
      name: "Reserve",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Reserve>;
    deployContract(
      name: "Delegate",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Delegate>;
    deployContract(
      name: "Delegator",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Delegator>;
    deployContract(
      name: "Interface",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Interface>;
    deployContract(
      name: "IUniswapV2Router",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router>;
    deployContract(
      name: "COREToken",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.COREToken>;
    deployContract(
      name: "DAIToken",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DAIToken>;
    deployContract(
      name: "DPIToken",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DPIToken>;
    deployContract(
      name: "FEIToken",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FEIToken>;
    deployContract(
      name: "FraxToken",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FraxToken>;
    deployContract(
      name: "RAIToken",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RAIToken>;
    deployContract(
      name: "UNIToken",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UNIToken>;
    deployContract(
      name: "USDCToken",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.USDCToken>;
    deployContract(
      name: "USDTToken",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.USDTToken>;
    deployContract(
      name: "WBTCToken",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WBTCToken>;
    deployContract(
      name: "WETHToken",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETHToken>;
    deployContract(
      name: "WISEToken",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WISEToken>;
    deployContract(
      name: "XORToken",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XORToken>;
    deployContract(
      name: "IAggregationExecutor",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAggregationExecutor>;
    deployContract(
      name: "Mock1inchRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mock1inchRouter>;
    deployContract(
      name: "MockERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20>;
    deployContract(
      name: "MockOpBorrowing",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOpBorrowing>;
    deployContract(
      name: "MockOpenLevV1",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOpenLevV1>;
    deployContract(
      name: "MockTaxToken",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockTaxToken>;
    deployContract(
      name: "MockTLAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockTLAdmin>;
    deployContract(
      name: "MockUniswapV2Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUniswapV2Factory>;
    deployContract(
      name: "MockUniswapV2Pair",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUniswapV2Pair>;
    deployContract(
      name: "MockUniswapV3Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUniswapV3Factory>;
    deployContract(
      name: "MockUniswapV3Pair",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUniswapV3Pair>;
    deployContract(
      name: "Storage",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Storage>;
    deployContract(
      name: "UniswapSwapHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapSwapHelper>;
    deployContract(
      name: "UpgradeControllerV2",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeControllerV2>;
    deployContract(
      name: "UpgradeLPoolV2",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeLPoolV2>;
    deployContract(
      name: "WETH",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH>;
    deployContract(
      name: "XOLE",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XOLE>;
    deployContract(
      name: "XOLEDelegator",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XOLEDelegator>;
    deployContract(
      name: "XOLEInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XOLEInterface>;
    deployContract(
      name: "XOLEStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XOLEStorage>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.Contract>;
  }
}
