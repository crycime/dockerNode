/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockTLAdmin,
  MockTLAdminInterface,
} from "../../../../contracts/udex/test/MockTLAdmin";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_decimal",
        type: "uint256",
      },
    ],
    name: "changeDecimal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimal",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101ad3803806101ad8339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610148806100656000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806376809ce314610046578063ef23358514610060578063f851a4401461007f575b600080fd5b61004e6100a3565b60408051918252519081900360200190f35b61007d6004803603602081101561007657600080fd5b50356100a9565b005b610087610103565b604080516001600160a01b039092168252519081900360200190f35b60015481565b6000546001600160a01b031633146100fe576040805162461bcd60e51b815260206004820152601360248201527239b2b73232b91034b9903737ba1030b236b4b760691b604482015290519081900360640190fd5b600155565b6000546001600160a01b03168156fea26469706673582212207667275ab5a681cee117dcfd6c42a2d79ad903c0e32bfab98d94b9386193f33364736f6c63430007060033";

type MockTLAdminConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTLAdminConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockTLAdmin__factory extends ContractFactory {
  constructor(...args: MockTLAdminConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _admin: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_admin, overrides || {});
  }
  override deploy(
    _admin: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_admin, overrides || {}) as Promise<
      MockTLAdmin & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockTLAdmin__factory {
    return super.connect(runner) as MockTLAdmin__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTLAdminInterface {
    return new Interface(_abi) as MockTLAdminInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockTLAdmin {
    return new Contract(address, _abi, runner) as unknown as MockTLAdmin;
  }
}
