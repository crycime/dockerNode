/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DelegatorInterfaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "delegateToImplementation"
      | "delegateToViewImplementation"
      | "implementation"
      | "setImplementation"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewImplementation"): EventFragment;

  encodeFunctionData(
    functionFragment: "delegateToImplementation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateToViewImplementation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setImplementation",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "delegateToImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateToViewImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImplementation",
    data: BytesLike
  ): Result;
}

export namespace NewImplementationEvent {
  export type InputTuple = [
    oldImplementation: AddressLike,
    newImplementation: AddressLike
  ];
  export type OutputTuple = [
    oldImplementation: string,
    newImplementation: string
  ];
  export interface OutputObject {
    oldImplementation: string;
    newImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DelegatorInterface extends BaseContract {
  connect(runner?: ContractRunner | null): DelegatorInterface;
  waitForDeployment(): Promise<this>;

  interface: DelegatorInterfaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  delegateToImplementation: TypedContractMethod<
    [data: BytesLike],
    [string],
    "nonpayable"
  >;

  delegateToViewImplementation: TypedContractMethod<
    [data: BytesLike],
    [string],
    "view"
  >;

  implementation: TypedContractMethod<[], [string], "view">;

  setImplementation: TypedContractMethod<
    [implementation_: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "delegateToImplementation"
  ): TypedContractMethod<[data: BytesLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "delegateToViewImplementation"
  ): TypedContractMethod<[data: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setImplementation"
  ): TypedContractMethod<[implementation_: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "NewImplementation"
  ): TypedContractEvent<
    NewImplementationEvent.InputTuple,
    NewImplementationEvent.OutputTuple,
    NewImplementationEvent.OutputObject
  >;

  filters: {
    "NewImplementation(address,address)": TypedContractEvent<
      NewImplementationEvent.InputTuple,
      NewImplementationEvent.OutputTuple,
      NewImplementationEvent.OutputObject
    >;
    NewImplementation: TypedContractEvent<
      NewImplementationEvent.InputTuple,
      NewImplementationEvent.OutputTuple,
      NewImplementationEvent.OutputObject
    >;
  };
}
