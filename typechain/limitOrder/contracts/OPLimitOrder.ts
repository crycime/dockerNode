/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace OPLimitOrderStorage {
  export type OrderStruct = {
    salt: BigNumberish;
    owner: AddressLike;
    deadline: BigNumberish;
    marketId: BigNumberish;
    longToken: boolean;
    depositToken: boolean;
    commissionToken: AddressLike;
    commission: BigNumberish;
    price0: BigNumberish;
  };

  export type OrderStructOutput = [
    salt: bigint,
    owner: string,
    deadline: bigint,
    marketId: bigint,
    longToken: boolean,
    depositToken: boolean,
    commissionToken: string,
    commission: bigint,
    price0: bigint
  ] & {
    salt: bigint;
    owner: string;
    deadline: bigint;
    marketId: bigint;
    longToken: boolean;
    depositToken: boolean;
    commissionToken: string;
    commission: bigint;
    price0: bigint;
  };

  export type CloseOrderStruct = {
    salt: BigNumberish;
    owner: AddressLike;
    deadline: BigNumberish;
    marketId: BigNumberish;
    longToken: boolean;
    depositToken: boolean;
    commissionToken: AddressLike;
    commission: BigNumberish;
    price0: BigNumberish;
    isStopLoss: boolean;
    closeHeld: BigNumberish;
    expectReturn: BigNumberish;
  };

  export type CloseOrderStructOutput = [
    salt: bigint,
    owner: string,
    deadline: bigint,
    marketId: bigint,
    longToken: boolean,
    depositToken: boolean,
    commissionToken: string,
    commission: bigint,
    price0: bigint,
    isStopLoss: boolean,
    closeHeld: bigint,
    expectReturn: bigint
  ] & {
    salt: bigint;
    owner: string;
    deadline: bigint;
    marketId: bigint;
    longToken: boolean;
    depositToken: boolean;
    commissionToken: string;
    commission: bigint;
    price0: bigint;
    isStopLoss: boolean;
    closeHeld: bigint;
    expectReturn: bigint;
  };

  export type OpenOrderStruct = {
    salt: BigNumberish;
    owner: AddressLike;
    deadline: BigNumberish;
    marketId: BigNumberish;
    longToken: boolean;
    depositToken: boolean;
    commissionToken: AddressLike;
    commission: BigNumberish;
    price0: BigNumberish;
    deposit: BigNumberish;
    borrow: BigNumberish;
    expectHeld: BigNumberish;
  };

  export type OpenOrderStructOutput = [
    salt: bigint,
    owner: string,
    deadline: bigint,
    marketId: bigint,
    longToken: boolean,
    depositToken: boolean,
    commissionToken: string,
    commission: bigint,
    price0: bigint,
    deposit: bigint,
    borrow: bigint,
    expectHeld: bigint
  ] & {
    salt: bigint;
    owner: string;
    deadline: bigint;
    marketId: bigint;
    longToken: boolean;
    depositToken: boolean;
    commissionToken: string;
    commission: bigint;
    price0: bigint;
    deposit: bigint;
    borrow: bigint;
    expectHeld: bigint;
  };
}

export interface OPLimitOrderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CLOSE_ORDER_TYPEHASH"
      | "OPEN_ORDER_TYPEHASH"
      | "ORDER_TYPEHASH"
      | "acceptAdmin"
      | "admin"
      | "cancelOrder"
      | "cancelOrders"
      | "closeTradeAndCancel"
      | "developer"
      | "dexAgg"
      | "eip712Domain"
      | "fillCloseOrder"
      | "fillOpenOrder"
      | "getOrderId"
      | "hashCloseOrder"
      | "hashOpenOrder"
      | "implementation"
      | "initialize"
      | "openLev"
      | "pendingAdmin"
      | "remaining"
      | "remainingRaw"
      | "setPendingAdmin"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "NewAdmin"
      | "NewPendingAdmin"
      | "OrderCanceled"
      | "OrderFilled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CLOSE_ORDER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPEN_ORDER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORDER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [OPLimitOrderStorage.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrders",
    values: [OPLimitOrderStorage.OrderStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTradeAndCancel",
    values: [
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BytesLike,
      OPLimitOrderStorage.OrderStruct[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "developer", values?: undefined): string;
  encodeFunctionData(functionFragment: "dexAgg", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fillCloseOrder",
    values: [
      OPLimitOrderStorage.CloseOrderStruct,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOpenOrder",
    values: [
      OPLimitOrderStorage.OpenOrderStruct,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderId",
    values: [OPLimitOrderStorage.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hashCloseOrder",
    values: [OPLimitOrderStorage.CloseOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOpenOrder",
    values: [OPLimitOrderStorage.OpenOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "openLev", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remaining",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingRaw",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingAdmin",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CLOSE_ORDER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPEN_ORDER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORDER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeTradeAndCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "developer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dexAgg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillCloseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOpenOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrderId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashCloseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashOpenOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openLev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remaining", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainingRaw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAdmin",
    data: BytesLike
  ): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAdminEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPendingAdminEvent {
  export type InputTuple = [
    oldPendingAdmin: AddressLike,
    newPendingAdmin: AddressLike
  ];
  export type OutputTuple = [oldPendingAdmin: string, newPendingAdmin: string];
  export interface OutputObject {
    oldPendingAdmin: string;
    newPendingAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderCanceledEvent {
  export type InputTuple = [
    trader: AddressLike,
    orderId: BytesLike,
    remaining: BigNumberish
  ];
  export type OutputTuple = [
    trader: string,
    orderId: string,
    remaining: bigint
  ];
  export interface OutputObject {
    trader: string;
    orderId: string;
    remaining: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderFilledEvent {
  export type InputTuple = [
    trader: AddressLike,
    orderId: BytesLike,
    commission: BigNumberish,
    remaining: BigNumberish,
    filling: BigNumberish
  ];
  export type OutputTuple = [
    trader: string,
    orderId: string,
    commission: bigint,
    remaining: bigint,
    filling: bigint
  ];
  export interface OutputObject {
    trader: string;
    orderId: string;
    commission: bigint;
    remaining: bigint;
    filling: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OPLimitOrder extends BaseContract {
  connect(runner?: ContractRunner | null): OPLimitOrder;
  waitForDeployment(): Promise<this>;

  interface: OPLimitOrderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CLOSE_ORDER_TYPEHASH: TypedContractMethod<[], [string], "view">;

  OPEN_ORDER_TYPEHASH: TypedContractMethod<[], [string], "view">;

  ORDER_TYPEHASH: TypedContractMethod<[], [string], "view">;

  acceptAdmin: TypedContractMethod<[], [void], "nonpayable">;

  admin: TypedContractMethod<[], [string], "view">;

  cancelOrder: TypedContractMethod<
    [order: OPLimitOrderStorage.OrderStruct],
    [void],
    "nonpayable"
  >;

  cancelOrders: TypedContractMethod<
    [orders: OPLimitOrderStorage.OrderStruct[]],
    [void],
    "nonpayable"
  >;

  closeTradeAndCancel: TypedContractMethod<
    [
      marketId: BigNumberish,
      longToken: boolean,
      closeHeld: BigNumberish,
      minOrMaxAmount: BigNumberish,
      dexData: BytesLike,
      orders: OPLimitOrderStorage.OrderStruct[]
    ],
    [void],
    "nonpayable"
  >;

  developer: TypedContractMethod<[], [string], "view">;

  dexAgg: TypedContractMethod<[], [string], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  fillCloseOrder: TypedContractMethod<
    [
      order: OPLimitOrderStorage.CloseOrderStruct,
      signature: BytesLike,
      closeAmount: BigNumberish,
      dexData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  fillOpenOrder: TypedContractMethod<
    [
      order: OPLimitOrderStorage.OpenOrderStruct,
      signature: BytesLike,
      fillingDeposit: BigNumberish,
      dexData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getOrderId: TypedContractMethod<
    [order: OPLimitOrderStorage.OrderStruct],
    [string],
    "view"
  >;

  hashCloseOrder: TypedContractMethod<
    [order: OPLimitOrderStorage.CloseOrderStruct],
    [string],
    "view"
  >;

  hashOpenOrder: TypedContractMethod<
    [order: OPLimitOrderStorage.OpenOrderStruct],
    [string],
    "view"
  >;

  implementation: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [_openLev: AddressLike, _dexAgg: AddressLike],
    [void],
    "nonpayable"
  >;

  openLev: TypedContractMethod<[], [string], "view">;

  pendingAdmin: TypedContractMethod<[], [string], "view">;

  remaining: TypedContractMethod<[_orderId: BytesLike], [bigint], "view">;

  remainingRaw: TypedContractMethod<[_orderId: BytesLike], [bigint], "view">;

  setPendingAdmin: TypedContractMethod<
    [newPendingAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CLOSE_ORDER_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPEN_ORDER_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ORDER_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptAdmin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cancelOrder"
  ): TypedContractMethod<
    [order: OPLimitOrderStorage.OrderStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelOrders"
  ): TypedContractMethod<
    [orders: OPLimitOrderStorage.OrderStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "closeTradeAndCancel"
  ): TypedContractMethod<
    [
      marketId: BigNumberish,
      longToken: boolean,
      closeHeld: BigNumberish,
      minOrMaxAmount: BigNumberish,
      dexData: BytesLike,
      orders: OPLimitOrderStorage.OrderStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "developer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dexAgg"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fillCloseOrder"
  ): TypedContractMethod<
    [
      order: OPLimitOrderStorage.CloseOrderStruct,
      signature: BytesLike,
      closeAmount: BigNumberish,
      dexData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillOpenOrder"
  ): TypedContractMethod<
    [
      order: OPLimitOrderStorage.OpenOrderStruct,
      signature: BytesLike,
      fillingDeposit: BigNumberish,
      dexData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getOrderId"
  ): TypedContractMethod<
    [order: OPLimitOrderStorage.OrderStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashCloseOrder"
  ): TypedContractMethod<
    [order: OPLimitOrderStorage.CloseOrderStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashOpenOrder"
  ): TypedContractMethod<
    [order: OPLimitOrderStorage.OpenOrderStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_openLev: AddressLike, _dexAgg: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "openLev"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "remaining"
  ): TypedContractMethod<[_orderId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "remainingRaw"
  ): TypedContractMethod<[_orderId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setPendingAdmin"
  ): TypedContractMethod<[newPendingAdmin: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "NewAdmin"
  ): TypedContractEvent<
    NewAdminEvent.InputTuple,
    NewAdminEvent.OutputTuple,
    NewAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewPendingAdmin"
  ): TypedContractEvent<
    NewPendingAdminEvent.InputTuple,
    NewPendingAdminEvent.OutputTuple,
    NewPendingAdminEvent.OutputObject
  >;
  getEvent(
    key: "OrderCanceled"
  ): TypedContractEvent<
    OrderCanceledEvent.InputTuple,
    OrderCanceledEvent.OutputTuple,
    OrderCanceledEvent.OutputObject
  >;
  getEvent(
    key: "OrderFilled"
  ): TypedContractEvent<
    OrderFilledEvent.InputTuple,
    OrderFilledEvent.OutputTuple,
    OrderFilledEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "NewAdmin(address,address)": TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;
    NewAdmin: TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;

    "NewPendingAdmin(address,address)": TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;
    NewPendingAdmin: TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;

    "OrderCanceled(address,bytes32,uint256)": TypedContractEvent<
      OrderCanceledEvent.InputTuple,
      OrderCanceledEvent.OutputTuple,
      OrderCanceledEvent.OutputObject
    >;
    OrderCanceled: TypedContractEvent<
      OrderCanceledEvent.InputTuple,
      OrderCanceledEvent.OutputTuple,
      OrderCanceledEvent.OutputObject
    >;

    "OrderFilled(address,bytes32,uint256,uint256,uint256)": TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;
    OrderFilled: TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;
  };
}
