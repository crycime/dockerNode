/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockDexAgg,
  MockDexAggInterface,
} from "../../../contracts/mocks/MockDexAgg";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "desToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "quoteToken",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "desToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "quoteToken",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "secondsAgo",
        type: "uint32",
      },
      {
        internalType: "bytes",
        name: "dexData",
        type: "bytes",
      },
    ],
    name: "getPriceCAvgPriceHAvgPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "cAvgPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "hAvgPrice",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "cAvgPrice_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "hAvgPrice_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp_",
        type: "uint256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "desToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "quoteToken",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "timeWindow",
        type: "uint32",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "updatePriceOracle",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061032e806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806315426c9714610051578063355efdd914610086578063a59a36ae146100b7578063d176dd451461010b575b600080fd5b61007161005f3660046101ee565b5063ffffffff16600455506001919050565b60405190151581526020015b60405180910390f35b6100a0610094366004610268565b50506000549160189150565b6040805192835260ff90911660208301520161007d565b6100e06100c53660046101ee565b50506000546001546002546003549295919450925060189190565b6040805195865260208601949094529284019190915260ff166060830152608082015260a00161007d565b61012d6101193660046102c6565b600093909355600191909155600255600355565b005b80356001600160a01b038116811461014657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261017257600080fd5b813567ffffffffffffffff8082111561018d5761018d61014b565b604051601f8301601f19908116603f011681019082821181831017156101b5576101b561014b565b816040528381528660208588010111156101ce57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561020457600080fd5b61020d8561012f565b935061021b6020860161012f565b9250604085013563ffffffff8116811461023457600080fd5b9150606085013567ffffffffffffffff81111561025057600080fd5b61025c87828801610161565b91505092959194509250565b60008060006060848603121561027d57600080fd5b6102868461012f565b92506102946020850161012f565b9150604084013567ffffffffffffffff8111156102b057600080fd5b6102bc86828701610161565b9150509250925092565b600080600080608085870312156102dc57600080fd5b505082359460208401359450604084013593606001359250905056fea2646970667358221220d18757d0ba9ba51c5641cf81d7f90f53e6f0209782da2a9dedefaae3e51c2a9264736f6c634300080f0033";

type MockDexAggConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockDexAggConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockDexAgg__factory extends ContractFactory {
  constructor(...args: MockDexAggConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockDexAgg & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockDexAgg__factory {
    return super.connect(runner) as MockDexAgg__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockDexAggInterface {
    return new Interface(_abi) as MockDexAggInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockDexAgg {
    return new Contract(address, _abi, runner) as unknown as MockDexAgg;
  }
}
