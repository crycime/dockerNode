/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "Adminable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Adminable__factory>;
    getContractFactory(
      name: "DelegateInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegateInterface__factory>;
    getContractFactory(
      name: "DelegatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegatorInterface__factory>;
    getContractFactory(
      name: "DexAggregatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexAggregatorInterface__factory>;
    getContractFactory(
      name: "OpenLevInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpenLevInterface__factory>;
    getContractFactory(
      name: "IOPLimitOrder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOPLimitOrder__factory>;
    getContractFactory(
      name: "OPLimitOrderStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OPLimitOrderStorage__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "MockDexAgg",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockDexAgg__factory>;
    getContractFactory(
      name: "MockOpenLev",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOpenLev__factory>;
    getContractFactory(
      name: "MockToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockToken__factory>;
    getContractFactory(
      name: "OPLimitOrder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OPLimitOrder__factory>;
    getContractFactory(
      name: "OPLimitOrderDelegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OPLimitOrderDelegator__factory>;
    getContractFactory(
      name: "ILimitOrder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILimitOrder__factory>;
    getContractFactory(
      name: "LimitOrderHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LimitOrderHelper__factory>;

    getContractAt(
      name: "IERC1271",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "IERC5267",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "EIP712",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "ShortStrings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "Adminable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Adminable>;
    getContractAt(
      name: "DelegateInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegateInterface>;
    getContractAt(
      name: "DelegatorInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegatorInterface>;
    getContractAt(
      name: "DexAggregatorInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DexAggregatorInterface>;
    getContractAt(
      name: "OpenLevInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OpenLevInterface>;
    getContractAt(
      name: "IOPLimitOrder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOPLimitOrder>;
    getContractAt(
      name: "OPLimitOrderStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OPLimitOrderStorage>;
    getContractAt(
      name: "Migrations",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "MockDexAgg",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockDexAgg>;
    getContractAt(
      name: "MockOpenLev",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOpenLev>;
    getContractAt(
      name: "MockToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockToken>;
    getContractAt(
      name: "OPLimitOrder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OPLimitOrder>;
    getContractAt(
      name: "OPLimitOrderDelegator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OPLimitOrderDelegator>;
    getContractAt(
      name: "ILimitOrder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILimitOrder>;
    getContractAt(
      name: "LimitOrderHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LimitOrderHelper>;

    deployContract(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271>;
    deployContract(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "Adminable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Adminable>;
    deployContract(
      name: "DelegateInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DelegateInterface>;
    deployContract(
      name: "DelegatorInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DelegatorInterface>;
    deployContract(
      name: "DexAggregatorInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DexAggregatorInterface>;
    deployContract(
      name: "OpenLevInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OpenLevInterface>;
    deployContract(
      name: "IOPLimitOrder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOPLimitOrder>;
    deployContract(
      name: "OPLimitOrderStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OPLimitOrderStorage>;
    deployContract(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Migrations>;
    deployContract(
      name: "MockDexAgg",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockDexAgg>;
    deployContract(
      name: "MockOpenLev",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockOpenLev>;
    deployContract(
      name: "MockToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockToken>;
    deployContract(
      name: "OPLimitOrder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OPLimitOrder>;
    deployContract(
      name: "OPLimitOrderDelegator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OPLimitOrderDelegator>;
    deployContract(
      name: "ILimitOrder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILimitOrder>;
    deployContract(
      name: "LimitOrderHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LimitOrderHelper>;

    deployContract(
      name: "IERC1271",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271>;
    deployContract(
      name: "IERC5267",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "EIP712",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "ShortStrings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "Adminable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Adminable>;
    deployContract(
      name: "DelegateInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DelegateInterface>;
    deployContract(
      name: "DelegatorInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DelegatorInterface>;
    deployContract(
      name: "DexAggregatorInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DexAggregatorInterface>;
    deployContract(
      name: "OpenLevInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OpenLevInterface>;
    deployContract(
      name: "IOPLimitOrder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOPLimitOrder>;
    deployContract(
      name: "OPLimitOrderStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OPLimitOrderStorage>;
    deployContract(
      name: "Migrations",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Migrations>;
    deployContract(
      name: "MockDexAgg",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockDexAgg>;
    deployContract(
      name: "MockOpenLev",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockOpenLev>;
    deployContract(
      name: "MockToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockToken>;
    deployContract(
      name: "OPLimitOrder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OPLimitOrder>;
    deployContract(
      name: "OPLimitOrderDelegator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OPLimitOrderDelegator>;
    deployContract(
      name: "ILimitOrder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILimitOrder>;
    deployContract(
      name: "LimitOrderHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LimitOrderHelper>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
